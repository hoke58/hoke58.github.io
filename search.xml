<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>博主的收藏夹</title>
    <url>/web/hoke-favorites.html</url>
    <content><![CDATA[<div class="note success">
            <p>博主的网络收藏夹，站点导航</p>
          </div>
<a id="more"></a>
<h1 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h1><ul>
<li>超级hash工具： <span class="exturl" data-url="aHR0cHM6Ly9tZDVoYXNoaW5nLm5ldA==" title="https://md5hashing.net">https://md5hashing.net<i class="fa fa-external-link"></i></span></li>
</ul>
<h1 id="生活"><a href="#生活" class="headerlink" title="生活"></a>生活</h1><ul>
<li>张大妈工资计算器： <span class="exturl" data-url="aHR0cHM6Ly9oaXpkbS5jbg==" title="https://hizdm.cn">https://hizdm.cn<i class="fa fa-external-link"></i></span></li>
</ul>
<h1 id="影视"><a href="#影视" class="headerlink" title="影视"></a>影视</h1><ul>
<li>四海影院： <span class="exturl" data-url="aHR0cDovL3d3dy5zaWhhaWthbi5jb20=" title="http://www.sihaikan.com">http://www.sihaikan.com<i class="fa fa-external-link"></i></span></li>
</ul>
]]></content>
      <categories>
        <category>Web</category>
      </categories>
      <tags>
        <tag>Web</tag>
        <tag>Website</tag>
        <tag>sitemap</tag>
      </tags>
  </entry>
  <entry>
    <title>开启 Google-BBR 网络加速</title>
    <url>/systemops/google-bbr.html</url>
    <content><![CDATA[<p><img src="https://upyun.hoke58.cn/img/google-bbr-bbr.png" alt="google-bbr-bbr.png"></p>
<a id="more"></a>
<h1 id="背景知识"><a href="#背景知识" class="headerlink" title="背景知识"></a>背景知识</h1><p>BBR (Bottleneck Bandwidth and RTT) 是 Google 出品的 TCP 拥塞控制算法，BBR 目的是要尽量跑满带宽，并且尽量不要有排队的情况。BBR 可以起到单边加速 TCP 连接的效果。</p>
<p>BBR解决了两个问题：</p>
<ul>
<li>一定丢包率的网络链路上充分利用带宽。非常适合高延迟，高带宽的网络链路。</li>
<li>降低网络链路上的 buffer 占用率，从而降低延迟。非常适合慢速接入网络的用户。</li>
</ul>
<p>网络链路上的包比较少时，道路很通畅，这个阶段，对于一个 TCP 连接来说，它的速度由这个连接两端之间的距离决定，也可以说是由 RTT 决定。当发包速率变大，把道路基本上填满了之后，这个阶段，带宽的大小决定了这个连接的速度，这时两端之间可能就会有包要排队，延迟时间除了 RTT 还有排队时间。</p>
<p><code>cwnd</code> 是普通的拥塞控制算法里最终要求得的一个值，用来控制发包速率。BBR 也要求到这个值，但是它不是最主要的控制发包速率的变量，主要的变量是 <code>pacing_rate</code>。</p>
<p>这两个变量都由探测到的带宽值和 RTT 值得到，整个过程都围绕着这两个值。在 BBR 算法中，有四种状态，几种状态可能会有如下的转换：</p>
<figure class="highlight gherkin"><table><tr><td class="code"><pre><span class="line">         |</span><br><span class="line"><span class="string">         V</span></span><br><span class="line"><span class="string">+---&gt; STARTUP  ----+</span></span><br><span class="line">|<span class="string">        </span>|<span class="string">         </span>|</span><br><span class="line">|<span class="string">        V         </span>|</span><br><span class="line">|<span class="string">      DRAIN   ----+</span></span><br><span class="line">|<span class="string">        </span>|<span class="string">         </span>|</span><br><span class="line">|<span class="string">        V         </span>|</span><br><span class="line">+---&gt; PROBE_BW ----+</span><br><span class="line">|<span class="string">      ^    </span>|<span class="string">      </span>|</span><br><span class="line">|<span class="string">      </span>|<span class="string">    </span>|<span class="string">      </span>|</span><br><span class="line">|<span class="string">      +----+      </span>|</span><br><span class="line">|<span class="string">                  </span>|</span><br><span class="line">+---- PROBE_RTT <span class="variable">&lt;--+</span></span><br></pre></td></tr></table></figure>
<p>另外还有一个重要变量，是在不同状态，不同阶段取的不同增益系数，比如有时需要多发包探测到最大瓶颈带宽，有时需要把发包量降下来探测较为准确的 RTT。</p>
<p><code>STARTUP</code> 类似与普通拥塞控制里的慢启动，增益系数是 <code>2ln2</code>，每一个来回都以这个系数增大发包速率，估测到带宽满了就进入 <code>DRAIN</code> 状态 —— 连续三个来回，测得的最大瓶颈带宽没有比上一轮增大 25% 以上，就算做带宽满了。</p>
<p>进入 <code>DRAIN</code> 状态，增益系数小于 1，也就降速了。一个包来回，把 <code>STARTUP</code> 状态中产生的队列“抽干”，怎么样测算到队列空了？发出去还没有 ACK 的包量 <code>inflight</code>，与 BDP （带宽延迟积）进行比较，<code>inflight &lt; BDP</code> 说明空了，道路不那么满了，如果 <code>inflght &gt; BDP</code> 说明还不能到下一个状态，继续 <code>DRAIN</code>。</p>
<p><code>PROBE_BW</code> 是稳定状态，这时已经测出来一个最大瓶颈带宽，而且尽量不会产生排队现象。之后的每个来回，在 <code>PROBE_BW</code> 状态循环（除非要进入下面提到的 <code>PROBE_RTT</code> 状态），轮询下面这些增益系数，5/4, 3/4, 1, 1, 1, 1, 1, 1，如此，最大瓶颈带宽就会在其停止增长的地方上下徘徊。大部分时间都应该处于 <code>PROBE_BW</code> 状态。</p>
<p>前面三种状态，都可能进入 <code>PROBE_RTT</code> 状态。超过十秒没有估测到更小的 RTT 值，这时进入 <code>PROBE_RTT</code> 状态，把发包量降低，空出道路来比较准确得测一个 RTT 值，至少 200ms 或一个包的来回之后退出这个状态。检查带宽是否是满的，进入不同的状态：如果不满，进入 <code>STARTUP</code> 状态，如果满，进入 <code>PROBE_BW</code> 状态。</p>
<h1 id="启用-BBR"><a href="#启用-BBR" class="headerlink" title="启用 BBR"></a>启用 BBR</h1><p>先甩一下 Google BBR 项目地址： <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2dvb2dsZS9iYnI=" title="https://github.com/google/bbr">https://github.com/google/bbr<i class="fa fa-external-link"></i></span></p>
<p>目前已有 BBR v2 Alpha/Preview 版本</p>
<h2 id="前置条件"><a href="#前置条件" class="headerlink" title="前置条件"></a>前置条件</h2><p>Linux 内核 4.9 版本以上，请使用以下命令查看内核</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># uname -sr</span></span><br></pre></td></tr></table></figure>
<p>如果你是 Centos 系统可参照 <a href="/systemops/centos-upgrade-kernel.html">Centos 升级内核的正确姿势</a> ，升级内核</p>
<blockquote>
<p>Linux 内核从 4.9 开始已经支持 BBR 算法</p>
</blockquote>
<h2 id="设置"><a href="#设置" class="headerlink" title="设置"></a>设置</h2><ol>
<li>执行以下命令，sysctl.conf 增加 BBR 配置<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">"# google bbr"</span> &gt;&gt; /etc/sysctl.conf</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"net.core.default_qdisc=fq"</span> &gt;&gt; /etc/sysctl.conf</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"net.ipv4.tcp_congestion_control=bbr"</span> &gt;&gt; /etc/sysctl.conf</span><br></pre></td></tr></table></figure></li>
<li>保存生效<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sysctl -p</span><br></pre></td></tr></table></figure></li>
<li>验证<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@yunwei ~]<span class="comment"># sysctl net.ipv4.tcp_available_congestion_control</span></span><br><span class="line">net.ipv4.tcp_available_congestion_control = reno cubic bbr</span><br><span class="line"></span><br><span class="line">[root@yunwei ~]<span class="comment"># lsmod | grep bbr</span></span><br><span class="line">tcp_bbr                20480  1</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>系统运维</category>
      </categories>
      <tags>
        <tag>bbr</tag>
        <tag>google</tag>
      </tags>
  </entry>
  <entry>
    <title>Centos 升级内核的正确姿势</title>
    <url>/systemops/centos-upgrade-kernel.html</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><div class="note warn">
            <p>本文仅适合在线 Yum 方式安装升级</p>
          </div>
<a id="more"></a>
<h1 id="查看当前内核版本"><a href="#查看当前内核版本" class="headerlink" title="查看当前内核版本"></a>查看当前内核版本</h1><p>升级前查看下现在发行版的内核</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># uname -sr</span></span><br><span class="line">Linux 3.10.0-1062.4.1.el7.x86_64</span><br></pre></td></tr></table></figure>
<h1 id="安装最新内核"><a href="#安装最新内核" class="headerlink" title="安装最新内核"></a>安装最新内核</h1><ol>
<li>导入 ELRepo 公钥<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">rpm --import https://www.elrepo.org/RPM-GPG-KEY-elrepo.org</span><br></pre></td></tr></table></figure>

</li>
</ol>
<p>ELRepo 项目使用的 GPG 密钥的详细信息访问<span class="exturl" data-url="aHR0cHM6Ly93d3cuZWxyZXBvLm9yZy90aWtpL2tleQ==" title="https://www.elrepo.org/tiki/key">https://www.elrepo.org/tiki/key<i class="fa fa-external-link"></i></span></p>
<ol start="2">
<li>安装 ELRepo 仓库，根据自己 OS 的发行版选对应命令。</li>
</ol>
<ul>
<li><p>To install ELRepo for <strong>RHEL-8</strong> or <strong>CentOS-8</strong>:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">yum install https://www.elrepo.org/elrepo-release-8.0-2.el8.elrepo.noarch.rpm</span><br></pre></td></tr></table></figure>
</li>
<li><p>To install ELRepo for <strong>RHEL-7, SL-7 or CentOS-7</strong>:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">yum install https://www.elrepo.org/elrepo-release-7.0-4.el7.elrepo.noarch.rpm</span><br></pre></td></tr></table></figure>
</li>
<li><p>To install ELRepo for <strong>RHEL-6, SL-6 or CentOS-6</strong>:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">yum install https://www.elrepo.org/elrepo-release-6-9.el6.elrepo.noarch.rpm</span><br></pre></td></tr></table></figure>
</li>
</ul>
<ol start="3">
<li><p>为了使用镜像系统，请同时安装 <code>yum-plugin-fastestmirror</code></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">yum install yum-plugin-fastestmirror -y</span><br></pre></td></tr></table></figure>
</li>
<li><p>ELRepo 安装后，使用下面的命令列出可用的系统内核相关包</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@yunwei ~]<span class="comment"># yum --disablerepo="*" --enablerepo="elrepo-kernel" list available</span></span><br><span class="line">Loaded plugins: fastestmirror</span><br><span class="line">Repository base is listed more than once <span class="keyword">in</span> the configuration</span><br><span class="line">Repository updates is listed more than once <span class="keyword">in</span> the configuration</span><br><span class="line">Repository extras is listed more than once <span class="keyword">in</span> the configuration</span><br><span class="line">Repository epel is listed more than once <span class="keyword">in</span> the configuration</span><br><span class="line">Loading mirror speeds from cached hostfile</span><br><span class="line"> * elrepo-kernel: hkg.mirror.rackspace.com</span><br><span class="line">Available Packages</span><br><span class="line">kernel-lt.x86_64                                                 4.4.204-1.el7.elrepo                                elrepo-kernel</span><br><span class="line">kernel<span class="_">-lt</span>-devel.x86_64                                           4.4.204-1.el7.elrepo                                elrepo-kernel</span><br><span class="line">kernel<span class="_">-lt</span>-doc.noarch                                             4.4.204-1.el7.elrepo                                elrepo-kernel</span><br><span class="line">kernel<span class="_">-lt</span>-headers.x86_64                                         4.4.204-1.el7.elrepo                                elrepo-kernel</span><br><span class="line">kernel<span class="_">-lt</span>-tools.x86_64                                           4.4.204-1.el7.elrepo                                elrepo-kernel</span><br><span class="line">kernel<span class="_">-lt</span>-tools-libs.x86_64                                      4.4.204-1.el7.elrepo                                elrepo-kernel</span><br><span class="line">kernel<span class="_">-lt</span>-tools-libs-devel.x86_64                                4.4.204-1.el7.elrepo                                elrepo-kernel</span><br><span class="line">kernel-ml-devel.x86_64                                           5.4.0-1.el7.elrepo                                  elrepo-kernel</span><br><span class="line">kernel-ml-doc.noarch                                             5.4.0-1.el7.elrepo                                  elrepo-kernel</span><br><span class="line">kernel-ml-headers.x86_64                                         5.4.0-1.el7.elrepo                                  elrepo-kernel</span><br><span class="line">kernel-ml-tools.x86_64                                           5.4.0-1.el7.elrepo                                  elrepo-kernel</span><br><span class="line">kernel-ml-tools-libs.x86_64                                      5.4.0-1.el7.elrepo                                  elrepo-kernel</span><br><span class="line">kernel-ml-tools-libs-devel.x86_64                                5.4.0-1.el7.elrepo                                  elrepo-kernel</span><br><span class="line">perf.x86_64                                                      5.4.0-1.el7.elrepo                                  elrepo-kernel</span><br><span class="line">python-perf.x86_64                                               5.4.0-1.el7.elrepo                                  elrepo-kernel</span><br></pre></td></tr></table></figure>
<p>可以看到 <code>kernel-ml</code> 最新版本是 5.4.0 了</p>
</li>
</ol>
<ol start="5">
<li>安装最新的主线稳定内核<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">yum --enablerepo=elrepo-kernel install kernel-ml</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h1 id="修改grub中默认的内核版本"><a href="#修改grub中默认的内核版本" class="headerlink" title="修改grub中默认的内核版本"></a>修改grub中默认的内核版本</h1><p>内核升级完毕后，目前内核还是默认的版本，如果此时直接执行 <code>reboot</code> 命令，重启后使用的内核版本还是默认的 3.10，不会使用最新安装的内核版本，首先，我们可以通过命令查看默认启动顺序：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@yunwei ~]<span class="comment"># awk -F\' '$1=="menuentry " &#123;print $2&#125;' /etc/grub2.cfg</span></span><br><span class="line">CentOS Linux (5.4.0-1.el7.elrepo.x86_64) 7 (Core)</span><br><span class="line">CentOS Linux (3.10.0-1062.4.1.el7.x86_64) 7 (Core)</span><br><span class="line">CentOS Linux (0-rescue-7d26c16f128042a684ea474c9e2c240f) 7 (Core)</span><br></pre></td></tr></table></figure>
<p>由上面可以看出新内核(5.4.0)目前位置在0，原来的内核(3.10.0)目前位置在1，所以如果想生效最新的内核，还需要我们修改内核的启动顺序为0：</p>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">vi <span class="regexp">/etc/</span><span class="keyword">default</span><span class="regexp">/grub</span></span><br></pre></td></tr></table></figure>
<p><img src="https://upyun.hoke58.cn/img/centos-upgrade-kernel-grub.jpg" alt="centos-upgrade-kernel-grub.jpg"></p>
<div class="note warn">
            <p>Centos 6 更改的文件相同，使用命令确定新内核位置后，然后将参数default更改为0即可。</p>
          </div>

<p>接着运行grub2-mkconfig命令来重新创建内核配置</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@yunwei ~]<span class="comment"># grub2-mkconfig -o /boot/grub2/grub.cfg</span></span><br><span class="line">Generating grub configuration file ...</span><br><span class="line">Found linux image: /boot/vmlinuz-5.4.0-1.el7.elrepo.x86_64</span><br><span class="line">Found initrd image: /boot/initramfs-5.4.0-1.el7.elrepo.x86_64.img</span><br><span class="line">Found linux image: /boot/vmlinuz-3.10.0-1062.4.1.el7.x86_64</span><br><span class="line">Found initrd image: /boot/initramfs-3.10.0-1062.4.1.el7.x86_64.img</span><br><span class="line">Found linux image: /boot/vmlinuz-0-rescue-7d26c16f128042a684ea474c9e2c240f</span><br><span class="line">Found initrd image: /boot/initramfs-0-rescue-7d26c16f128042a684ea474c9e2c240f.img</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure>

<h1 id="重启，验证最新内核"><a href="#重启，验证最新内核" class="headerlink" title="重启，验证最新内核"></a>重启，验证最新内核</h1><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">reboot</span><br><span class="line"></span><br><span class="line">[root@yunwei ~]<span class="comment"># uname -sr</span></span><br><span class="line">Linux 5.4.0-1.el7.elrepo.x86_64</span><br></pre></td></tr></table></figure>

<h1 id="删除旧内核"><a href="#删除旧内核" class="headerlink" title="删除旧内核"></a>删除旧内核</h1><ol>
<li>查看系统中全部的内核 RPM 包<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@yunwei ~]<span class="comment"># rpm -aq |grep kernel</span></span><br><span class="line">kernel-headers-3.10.0-1062.4.1.el7.x86_64</span><br><span class="line">kernel-debug-devel-3.10.0-1062.4.1.el7.x86_64</span><br><span class="line">kernel-tools-libs-3.10.0-1062.4.1.el7.x86_64</span><br><span class="line">kernel-tools-3.10.0-1062.4.1.el7.x86_64</span><br><span class="line">kernel-ml-5.4.0-1.el7.elrepo.x86_64</span><br><span class="line">kernel-3.10.0-1062.4.1.el7.x86_64</span><br><span class="line">kernel-devel-3.10.0-1062.4.1.el7.x86_64</span><br></pre></td></tr></table></figure></li>
<li>删除旧内核<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">yum remove kernel-headers-3.10.0-1062.4.1.el7.x86_64 kernel-debug-devel-3.10.0-1062.4.1.el7.x86_64 kernel-tools-3.10.0-1062.4.1.el7.x86_64 kernel-3.10.0-1062.4.1.el7.x86_64 kernel-devel-3.10.0-1062.4.1.el7.x86_64</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h1 id="安装最新版-kernel-tool，-kernel-headers，-kernel-devel"><a href="#安装最新版-kernel-tool，-kernel-headers，-kernel-devel" class="headerlink" title="安装最新版 kernel-tool， kernel-headers， kernel-devel"></a>安装最新版 kernel-tool， kernel-headers， kernel-devel</h1><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">yum --enablerepo=elrepo-kernel install kernel-ml-devel.x86_64 kernel-ml-headers.x86_64 kernel-ml-tools.x86_64</span><br></pre></td></tr></table></figure>

<h1 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h1><ul>
<li><span class="exturl" data-url="aHR0cDovL2VscmVwby5vcmcvdGlraS9pbmRleC5waHA=" title="http://elrepo.org/tiki/index.php">ELRepo.org<i class="fa fa-external-link"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cua2VybmVsLm9yZw==" title="https://www.kernel.org">The Linux Kernel Archives<i class="fa fa-external-link"></i></span></li>
</ul>
]]></content>
      <categories>
        <category>系统运维</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>centos</tag>
        <tag>kernel</tag>
      </tags>
  </entry>
  <entry>
    <title>Nginx 反代 frp https 隐藏端口并开启缓存加速</title>
    <url>/web/nginx-frp-https.html</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>折腾了一次用nginx反代frp https，立帖记录，如果 frp 使用的是 http 相对简单些，本文不介绍啦</p>
<blockquote>
<p>还不知道 frp 的朋友，点击项目地址 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2ZhdGVkaWVyL2ZycA==" title="https://github.com/fatedier/frp">https://github.com/fatedier/frp<i class="fa fa-external-link"></i></span></p>
</blockquote>
<a id="more"></a>
<h2 id="流量走向"><a href="#流量走向" class="headerlink" title="流量走向"></a>流量走向</h2><p>browser client &lt;==&gt; <code>nginx（公网）</code> &lt;==&gt; <code>frps（公网）</code> &lt;==&gt; <code>frpc（内网）</code> &lt;==&gt; nginx &amp; app （内网）</p>
<h1 id="frps"><a href="#frps" class="headerlink" title="frps"></a>frps</h1><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">[common]</span></span><br><span class="line"><span class="comment"># A literal address or host name for IPv6 must be enclosed</span></span><br><span class="line"><span class="comment"># in square brackets, as in "[::1]:80", "[ipv6-host]:http" or "[ipv6-host%zone]:80"</span></span><br><span class="line"><span class="attr">bind_addr</span> = <span class="string">0.0.0.0</span></span><br><span class="line"><span class="attr">bind_port</span> = <span class="string">7000</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># udp port to help make udp hole to penetrate nat</span></span><br><span class="line"><span class="attr">bind_udp_port</span> = <span class="string">7001</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># udp port used for kcp protocol, it can be same with 'bind_port'</span></span><br><span class="line"><span class="comment"># if not set, kcp is disabled in frps</span></span><br><span class="line"><span class="attr">kcp_bind_port</span> = <span class="string">7000</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># specify which address proxy will listen for, default value is same with bind_addr</span></span><br><span class="line"><span class="comment"># proxy_bind_addr = 127.0.0.1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># if you want to support virtual host, you must set the http port for listening (optional)</span></span><br><span class="line"><span class="comment"># <span class="doctag">Note:</span> http port and https port can be same with bind_port</span></span><br><span class="line"><span class="attr">vhost_http_port</span> = <span class="string">8080</span></span><br><span class="line"><span class="attr">vhost_https_port</span> = <span class="string">8443</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># set dashboard_addr and dashboard_port to view dashboard of frps</span></span><br><span class="line"><span class="comment"># dashboard_addr's default value is same with bind_addr</span></span><br><span class="line"><span class="comment"># dashboard is available only if dashboard_port is set</span></span><br><span class="line"><span class="attr">dashboard_addr</span> = <span class="string">0.0.0.0</span></span><br><span class="line"><span class="attr">dashboard_port</span> = <span class="string">7500</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># dashboard user and passwd for basic auth protect, if not set, both default value is admin</span></span><br><span class="line"><span class="attr">dashboard_user</span> = <span class="string">admin</span></span><br><span class="line"><span class="attr">dashboard_pwd</span> = <span class="string">admin</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># console or real logFile path like ./frps.log</span></span><br><span class="line"><span class="attr">log_file</span> = <span class="string">./frps.log</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># trace, debug, info, warn, error</span></span><br><span class="line"><span class="attr">log_level</span> = <span class="string">info</span></span><br><span class="line"></span><br><span class="line"><span class="attr">log_max_days</span> = <span class="string">3</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># auth token</span></span><br><span class="line"><span class="attr">token</span> = <span class="string">12345678</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># only allow frpc to bind ports you list, if you set nothing, there won't be any limit</span></span><br><span class="line"><span class="attr">allow_ports</span> = <span class="string">2000-3000,3001,3003,4000-50000</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># pool_count in each proxy will change to max_pool_count if they exceed the maximum value</span></span><br><span class="line"><span class="attr">max_pool_count</span> = <span class="string">5</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># max ports can be used for each client, default value is 0 means no limit</span></span><br><span class="line"><span class="attr">max_ports_per_client</span> = <span class="string">0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># if subdomain_host is not empty, you can set subdomain when type is http or https in frpc's configure file</span></span><br><span class="line"><span class="comment"># when subdomain is test, the host used by routing is test.frps.com</span></span><br><span class="line"><span class="attr">subdomain_host</span> = <span class="string">frps.com</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># if tcp stream multiplexing is used, default is true</span></span><br><span class="line"><span class="attr">tcp_mux</span> = <span class="string">true</span></span><br></pre></td></tr></table></figure>

<h1 id="frpc"><a href="#frpc" class="headerlink" title="frpc"></a>frpc</h1><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># [common] is integral section</span></span><br><span class="line"><span class="attr">[common]</span></span><br><span class="line"><span class="comment"># A literal address or host name for IPv6 must be enclosed</span></span><br><span class="line"><span class="comment"># in square brackets, as in "[::1]:80", "[ipv6-host]:http" or "[ipv6-host%zone]:80"</span></span><br><span class="line"><span class="attr">server_addr</span> = <span class="string">0.0.0.0 \\frps 公网IP</span></span><br><span class="line"><span class="attr">server_port</span> = <span class="string">7000 \\frps 绑定端口</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果frpc不能上网还支持代理配置</span></span><br><span class="line"><span class="comment"># if you want to connect frps by http proxy or socks5 proxy, you can set http_proxy here or in global environment variables</span></span><br><span class="line"><span class="comment"># it only works when protocol is tcp</span></span><br><span class="line"><span class="comment"># http_proxy = http://user:passwd@192.168.1.128:8080</span></span><br><span class="line"><span class="comment"># http_proxy = socks5://user:passwd@192.168.1.128:1080</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># console or real logFile path like ./frpc.log</span></span><br><span class="line"><span class="attr">log_file</span> = <span class="string">./frpc.log</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># trace, debug, info, warn, error</span></span><br><span class="line"><span class="attr">log_level</span> = <span class="string">info</span></span><br><span class="line"></span><br><span class="line"><span class="attr">log_max_days</span> = <span class="string">3</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># disable log colors when log_file is console, default is false</span></span><br><span class="line"><span class="attr">disable_log_color</span> = <span class="string">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># for authentication</span></span><br><span class="line"><span class="attr">token</span> = <span class="string">12345678 \\要和 frps 值一样</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># set admin address for control frpc's action by http api such as reload</span></span><br><span class="line"><span class="attr">admin_addr</span> = <span class="string">0.0.0.0</span></span><br><span class="line"><span class="attr">admin_port</span> = <span class="string">7400</span></span><br><span class="line"><span class="attr">admin_user</span> = <span class="string">admin</span></span><br><span class="line"><span class="attr">admin_pwd</span> = <span class="string">admin</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># connections will be established in advance, default value is zero</span></span><br><span class="line"><span class="attr">pool_count</span> = <span class="string">5</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># if tcp stream multiplexing is used, default is true, it must be same with frps</span></span><br><span class="line"><span class="attr">tcp_mux</span> = <span class="string">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># your proxy name will be changed to &#123;user&#125;.&#123;proxy&#125;</span></span><br><span class="line"><span class="attr">user</span> = <span class="string">your_name</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># decide if exit program when first login failed, otherwise continuous relogin to frps</span></span><br><span class="line"><span class="comment"># default is true</span></span><br><span class="line"><span class="attr">login_fail_exit</span> = <span class="string">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># communication protocol used to connect to server</span></span><br><span class="line"><span class="comment"># now it supports tcp and kcp and websocket, default is tcp</span></span><br><span class="line"><span class="attr">protocol</span> = <span class="string">tcp</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># if tls_enable is true, frpc will connect frps by tls</span></span><br><span class="line"><span class="attr">tls_enable</span> = <span class="string">true</span></span><br><span class="line"></span><br><span class="line"><span class="attr">[web02]</span></span><br><span class="line"><span class="attr">type</span> = <span class="string">https</span></span><br><span class="line"><span class="attr">local_ip</span> = <span class="string">127.0.0.1</span></span><br><span class="line"><span class="attr">local_port</span> = <span class="string">443</span></span><br><span class="line"><span class="attr">use_encryption</span> = <span class="string">false</span></span><br><span class="line"><span class="attr">use_compression</span> = <span class="string">false</span></span><br><span class="line"><span class="attr">subdomain</span> = <span class="string">web02</span></span><br><span class="line"><span class="comment">#custom_domains = web02.frps.com</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>如果 frps 设置 <code>subdomain_host</code>，在 frpc http/https 类型中可以结合 <code>subdomain</code> 使用。</p>
</blockquote>
<p>例: <code>subdomain_host = frps.com</code> , <code>subdomain = web02</code> DNS 配置泛域名 <code>*.frps.com</code> 至公网主机上， 即可直接访问 <code>https://web02.frps.com:8843</code></p>
<h1 id="nginx"><a href="#nginx" class="headerlink" title="nginx"></a>nginx</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">server</span><br><span class="line">&#123;</span><br><span class="line">    listen <span class="number">80</span>;</span><br><span class="line">	listen <span class="number">443</span> ssl http2;</span><br><span class="line">    server_name pan.hoke58.cn;</span><br><span class="line">    index index.php index.html index.htm <span class="keyword">default</span>.php <span class="keyword">default</span>.htm <span class="keyword">default</span>.html;</span><br><span class="line">    </span><br><span class="line">    #SSL-START SSL相关配置，请勿删除或修改下一行带注释的404规则</span><br><span class="line">    #error_page 404/404.html;</span><br><span class="line">    #HTTP_TO_HTTPS_START</span><br><span class="line">    <span class="keyword">if</span> ($server_port !~ <span class="number">443</span>)&#123;</span><br><span class="line">        rewrite ^(<span class="regexp">/.*)$ https:/</span><span class="regexp">/$host$1 permanent;</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">    #HTTP_TO_HTTPS_END</span></span><br><span class="line"><span class="regexp">    ssl_certificate    /</span>www/server/panel/vhost/cert/pan.hoke58.cn/fullchain.pem;</span><br><span class="line">    ssl_certificate_key    /www/server/panel/vhost/cert/pan.hoke58.cn/privkey.pem;</span><br><span class="line">    ssl_protocols TLSv1 TLSv1<span class="number">.1</span> TLSv1<span class="number">.2</span> TLSv1<span class="number">.3</span>;</span><br><span class="line">    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:HIGH:!aNULL:!MD5:!RC4:!DHE;</span><br><span class="line">    ssl_prefer_server_ciphers on;</span><br><span class="line">    ssl_session_cache shared:SSL:<span class="number">10</span>m;</span><br><span class="line">    ssl_session_timeout <span class="number">10</span>m;</span><br><span class="line">    error_page <span class="number">497</span>  https:<span class="comment">//$host$request_uri;</span></span><br><span class="line">    #SSL-END</span><br><span class="line">    </span><br><span class="line">    #ERROR-PAGE-START  错误页配置，可以注释、删除或修改</span><br><span class="line">    #error_page 404 /404.html;</span><br><span class="line">    #error_page 502 /502.html;</span><br><span class="line">    #ERROR-PAGE-END</span><br><span class="line">    </span><br><span class="line">    location ~ ^\/(?:build|tests|config|lib|<span class="number">3</span>rdparty|templates|data)\/ &#123;</span><br><span class="line">        deny all;</span><br><span class="line">    &#125;</span><br><span class="line">    location ~ ^\/(?:\.|autotest|occ|issue|indie|db_|<span class="built_in">console</span>) &#123;</span><br><span class="line">        deny all;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location = <span class="regexp">/.well-known/</span>carddav &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">301</span> $scheme:<span class="comment">//$host:$server_port/remote.php/dav;</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    location = <span class="regexp">/.well-known/</span>caldav &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">301</span> $scheme:<span class="comment">//$host:$server_port/remote.php/dav;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    #PROXY-START/</span><br><span class="line">    location /</span><br><span class="line">    &#123;</span><br><span class="line">    resolver <span class="number">114.114</span><span class="number">.114</span><span class="number">.114</span> ipv6=off;</span><br><span class="line">    expires <span class="number">12</span>h;</span><br><span class="line">    <span class="keyword">if</span> ($request_uri ~* <span class="string">"(php|jsp|cgi|asp|aspx)"</span>)</span><br><span class="line">    &#123;</span><br><span class="line">         expires <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    # Add headers to serve security related headers</span><br><span class="line">    # Before enabling Strict-Transport-Security headers please read into this topic first.</span><br><span class="line">    add_header Strict-Transport-Security <span class="string">"max-age=15768000; includeSubDomains; preload;"</span>;    </span><br><span class="line">    </span><br><span class="line">    proxy_redirect off;</span><br><span class="line">    proxy_pass https:<span class="comment">//$host:8443; # frps https 的端口</span></span><br><span class="line">    proxy_set_header Host $host;</span><br><span class="line">    proxy_ssl_server_name on;</span><br><span class="line">    proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">    proxy_set_header REMOTE-HOST $remote_addr;</span><br><span class="line">    proxy_set_header X-Forwarded-Proto $scheme;    </span><br><span class="line">    </span><br><span class="line">    #持久化连接相关配置</span><br><span class="line">    proxy_connect_timeout <span class="number">60</span>s;</span><br><span class="line">    proxy_read_timeout <span class="number">86400</span>s;</span><br><span class="line">    proxy_send_timeout <span class="number">30</span>s;</span><br><span class="line">    proxy_http_version <span class="number">1.1</span>;</span><br><span class="line">    proxy_set_header Upgrade $http_upgrade;</span><br><span class="line">    proxy_set_header Connection <span class="string">"upgrade"</span>;</span><br><span class="line">    add_header X-Cache $upstream_cache_status;</span><br><span class="line">    </span><br><span class="line">    #Set Nginx Cache</span><br><span class="line">    proxy_cache cache_one;</span><br><span class="line">    proxy_cache_key $host$uri$is_args$args;</span><br><span class="line">    proxy_cache_valid <span class="number">200</span> <span class="number">304</span> <span class="number">30</span>m;</span><br><span class="line">    proxy_cache_valid  <span class="number">301</span> <span class="number">302</span> <span class="number">24</span>h;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location ~* \.(jpg|jpeg|gif|png|svg|css|scss|js|ico|xml|woff|woff2|ttf|otf|eot)$</span><br><span class="line">    &#123;</span><br><span class="line">    resolver <span class="number">114.114</span><span class="number">.114</span><span class="number">.114</span> ipv6=off;</span><br><span class="line">    expires <span class="number">30</span>d;</span><br><span class="line">    # Add headers to serve security related headers</span><br><span class="line">    # Before enabling Strict-Transport-Security headers please read into this topic first.</span><br><span class="line">    add_header Strict-Transport-Security <span class="string">"max-age=15768000; includeSubDomains; preload;"</span>;    </span><br><span class="line">    </span><br><span class="line">    proxy_redirect off;</span><br><span class="line">    proxy_pass https:<span class="comment">//$host:8443; # frps https 的端口</span></span><br><span class="line">    proxy_set_header Host $host;</span><br><span class="line">    proxy_ssl_server_name on;</span><br><span class="line">    proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">    proxy_set_header REMOTE-HOST $remote_addr;</span><br><span class="line">    proxy_set_header X-Forwarded-Proto $scheme;    </span><br><span class="line">    </span><br><span class="line">    #持久化连接相关配置</span><br><span class="line">    proxy_connect_timeout <span class="number">60</span>s;</span><br><span class="line">    proxy_read_timeout <span class="number">86400</span>s;</span><br><span class="line">    proxy_send_timeout <span class="number">30</span>s;</span><br><span class="line">    proxy_http_version <span class="number">1.1</span>;</span><br><span class="line">    proxy_set_header Upgrade $http_upgrade;</span><br><span class="line">    proxy_set_header Connection <span class="string">"upgrade"</span>;</span><br><span class="line">    add_header X-Cache $upstream_cache_status;</span><br><span class="line">    </span><br><span class="line">    #Set Nginx Cache</span><br><span class="line">    proxy_cache cache_one;</span><br><span class="line">    proxy_cache_key $host$uri$is_args$args;</span><br><span class="line">    proxy_cache_valid <span class="number">200</span> <span class="number">304</span> <span class="number">301</span> <span class="number">302</span> <span class="number">3</span>d;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    #PROXY-END/</span><br><span class="line">    </span><br><span class="line">    #禁止访问的文件或目录</span><br><span class="line">    location ~ ^<span class="regexp">/(\.user.ini|\.htaccess|\.git|\.svn|\.project|LICENSE|README.md)</span></span><br><span class="line"><span class="regexp">    &#123;</span></span><br><span class="line"><span class="regexp">        return 404;</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">    </span></span><br><span class="line"><span class="regexp">    #一键申请SSL证书验证目录相关设置</span></span><br><span class="line"><span class="regexp">    location ~ \.well-known&#123;</span></span><br><span class="line"><span class="regexp">        allow all;</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">    </span></span><br><span class="line"><span class="regexp">	access_log  /</span>www/wwwlogs/access.log;</span><br><span class="line">    error_log  /www/wwwlogs/error.log;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p><code>openssl s_client -connect 127.0.0.1:443 -tls1</code></p>
]]></content>
      <categories>
        <category>Web</category>
      </categories>
      <tags>
        <tag>Nginx</tag>
        <tag>frp</tag>
        <tag>https</tag>
      </tags>
  </entry>
  <entry>
    <title>Dnsmasq 超好用DNS服务</title>
    <url>/systemops/dnsmasq.html</url>
    <content><![CDATA[<p><img src="https://upyun.hoke58.cn/img/dnsmasq-Dnsmasq.png" alt="dnsmasq-Dnsmasq.png"></p>
<a id="more"></a>
<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>Dnsmasq： 轻量级的 DNS，DHCP 服务器，适用于资源受限的路由器和防火墙。它还已广泛用于智能手机和便携式热点的网络共享，并在虚拟化框架中支持虚拟网络。受支持的平台包括Linux（带有glibc和uclibc），Android, BSD 和 Mac OSX。Dnsmasq包含在大多数Linux发行版以及FreeBSD，OpenBSD和NetBSD的端口系统中。Dnsmasq提供完整的IPv6支持。</p>
<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><ul>
<li><p>CentOS</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">yum install -y dnsmasq</span><br></pre></td></tr></table></figure></li>
<li><p>Ubuntu/Debian/Deepin</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">apt-get install -y dnsmasq</span><br></pre></td></tr></table></figure>
<h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><p>DNSmasq 的配置文件位于 <code>/etc/dnsmasq.conf</code>，均有注释说明，记录我的 <code>dnsmasq.conf</code>。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@repo ~]<span class="comment"># egrep -v '^#|^$' /etc/dnsmasq.conf </span></span><br><span class="line"><span class="comment"># 以下两个参数告诉Dnsmasq过滤一些查询：1.哪些公共DNS没有回答 2.哪些root根域不可达。</span></span><br><span class="line">domain-needed <span class="comment"># 从不转发格式错误的域名</span></span><br><span class="line">bogus-priv <span class="comment"># 从不转发不在路由地址中的域名</span></span><br><span class="line"></span><br><span class="line">resolv-file=/home/hoke/dnsmasq/upstream.conf <span class="comment"># 上游地址</span></span><br><span class="line"><span class="built_in">local</span>=/runchain.com/ <span class="comment"># 增加一个本地域名，会在/etc/hosts中进行查询</span></span><br><span class="line">addn-hosts=/home/hoke/dnsmasq/add_hosts  <span class="comment"># 自定义 hosts </span></span><br><span class="line"></span><br><span class="line">cache-size=10000 <span class="comment"># 设置dns缓存大小,默认为150条</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># For debugging purposes, log each DNS query as it passes through</span></span><br><span class="line"><span class="comment"># dnsmasq.</span></span><br><span class="line"><span class="built_in">log</span>-queries</span><br><span class="line"><span class="built_in">log</span>-facility=/var/<span class="built_in">log</span>/dnsmasq.log</span><br><span class="line"></span><br><span class="line"><span class="comment"># Include all files in a directory which end in .conf</span></span><br><span class="line">conf-dir=/home/hoke/dnsmasq/dnsmasq.d/,*.conf</span><br><span class="line"></span><br><span class="line">no-negcache <span class="comment"># 不缓存未知域名缓存，默认情况下dnsmasq缓存未知域名并直接返回为客户端。</span></span><br><span class="line">clear-on-reload <span class="comment"># 重启后清空缓存</span></span><br></pre></td></tr></table></figure>
<p><code>upstream.conf</code> 上游地址配置</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@repo ~]<span class="comment"># cat /home/hoke/dnsmasq/upstream.conf</span></span><br><span class="line">nameserver 114.114.114.114</span><br><span class="line">nameserver 8.8.8.8</span><br></pre></td></tr></table></figure>
<p>以上仅开启 DNS，需要开启 DHCP 的朋友参看配置文件注释，配置修改后启动生效即可</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">systemctl start dnsmasq</span><br></pre></td></tr></table></figure>
<h1 id="高阶技能"><a href="#高阶技能" class="headerlink" title="高阶技能"></a>高阶技能</h1><h2 id="dnsmasq-china-list"><a href="#dnsmasq-china-list" class="headerlink" title="dnsmasq-china-list"></a>dnsmasq-china-list</h2><p>特定于中文的配置可改善您喜欢的DNS服务器。chnroutes的最佳合作伙伴。</p>
</li>
<li><p>提高中文域名的解析速度。</p>
</li>
<li><p>尽可能获取最佳的CDN节点，但不要妥协外来CDN的结果，因此您同时也可以获得VPN的最佳CDN节点。</p>
</li>
<li><p>在NXDOMAIN上阻止ISP广告（例如114so）。</p>
</li>
</ul>
<p>项目地址: <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2ZlbGl4b25tYXJzL2Ruc21hc3EtY2hpbmEtbGlzdA==" title="https://github.com/felixonmars/dnsmasq-china-list">https://github.com/felixonmars/dnsmasq-china-list<i class="fa fa-external-link"></i></span></p>
<h3 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h3><ol>
<li>clone 项目<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/felixonmars/dnsmasq-china-list.git</span><br></pre></td></tr></table></figure></li>
<li>把 <code>*.conf</code> 拷贝至 <code>conf-dir=/home/hoke/dnsmasq/dnsmasq.d/</code> 目录中</li>
<li>重启 DNSmasq <figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">systemctl restart dnsmasq</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="conf-说明"><a href="#conf-说明" class="headerlink" title="conf 说明"></a>conf 说明</h3><ul>
<li><p><code>accelerated-domains.china.conf</code>：一般域加速。<br/><br>使用中文DNS服务器时，这些域的解析速度和/或结果更好。要确定某个域是否符合条件，必须满足以下条件之一：</p>
<ul>
<li>域的NS服务器位于中国大陆。</li>
<li>使用中国的DNS服务器时，该域将解析为位于中国大陆的IP，但使用外国的DNS服务器（例如，在中国具有节点的CDN加速站点）时，该域并非总是如此。但是，这不包括在中国大陆附近有节点的节点，例如日本，香港，台湾等。</li>
<li>如果顶级域名已经在列表中，请不要添加子域名。这包括该/cn/规则已匹配的所有.cn域。</li>
</ul>
</li>
<li><p><code>google.china.conf</code>：加速Google域。<br/><br>使用中文DNS时，会将这些域解析到Google中国服务器。在大多数情况下，这将为使用Google网络服务（例如Google Web Fonts和AdSense）的网站缩短页面加载时间。</p>
<blockquote>
<p>请记住，它们不被认为是稳定的。使用风险自负。</p>
</blockquote>
</li>
<li><p><code>apple.china.conf</code>：Apple域名将加速发展。<br/><br>一些ISP（通常是较小的ISP）在使用其中国大陆CDN服务器访问Apple资产时遇到问题。如果发生这种情况，请考虑删除此文件。</p>
</li>
<li><p><code>bogus-nxdomain.china.conf</code>：反劫持，一般某域名如果不存在 dns 解析结果，会返回 nxdomain ，但是有些运营商会无良重定向至 114 导航等广告页面，dnsmasq-china-list 项目收集了一些这种污染 IP</p>
</li>
</ul>
<h2 id="定时检测-hosts-自动刷新-Dnsmasq"><a href="#定时检测-hosts-自动刷新-Dnsmasq" class="headerlink" title="定时检测 hosts , 自动刷新 Dnsmasq"></a>定时检测 hosts , 自动刷新 Dnsmasq</h2><p>每次改动 hosts , 都需要手动 restart Dnsmasq ,整了个自动化脚本放到定时任务里，实现自动刷新<br>新增定时脚本<code>dnsmasq_crontab.sh</code>, 作用是检测 add_hosts 文件1分钟内有没有修改，如有修改执行 restart dnsmqsq 命令 </p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/env bash</span></span><br><span class="line"><span class="comment">######################脚本注释#############################</span></span><br><span class="line"><span class="comment"># 功  能： Dnsmasq自动刷新                                #</span></span><br><span class="line"><span class="comment"># 作  者： hoke                                           #</span></span><br><span class="line"><span class="comment"># 时  间： 20191126                                       #</span></span><br><span class="line"><span class="comment">###########################################################</span></span><br><span class="line">PATH=/bin:/sbin:/usr/bin:/usr/sbin:/usr/<span class="built_in">local</span>/bin:/usr/<span class="built_in">local</span>/sbin:~/bin</span><br><span class="line"><span class="built_in">export</span> PATH</span><br><span class="line"><span class="comment">#Current folder</span></span><br><span class="line">CUR_DIR=`<span class="built_in">pwd</span>`</span><br><span class="line">DNSMASQ_PATH=/home/hoke/dnsmasq/</span><br><span class="line">DNSMASQ_HOSTS=add_hosts</span><br><span class="line">DNSMASQ_CHECK=`find <span class="variable">$&#123;DNSMASQ_PATH&#125;</span> -name <span class="variable">$&#123;DNSMASQ_HOSTS&#125;</span> -mmin -2`</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ -n <span class="variable">$DNSMASQ_CHECK</span> ];<span class="keyword">then</span></span><br><span class="line">  systemctl restart dnsmasq</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure>
<p>加入 crontab</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">*/1 * * * * /home/hoke/dnsmasq/dnsmasq_crontab.sh</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>系统运维</category>
      </categories>
      <tags>
        <tag>Dnsmasq</tag>
        <tag>DNS</tag>
        <tag>DHCP</tag>
      </tags>
  </entry>
  <entry>
    <title>ERROR network conf_default id has active endpoints</title>
    <url>/docker/docker-network-error.html</url>
    <content><![CDATA[<h1 id="现象"><a href="#现象" class="headerlink" title="现象"></a>现象</h1><p>表象是容器无法 stop, restart, rm , 登录主机后执行</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@orderer0 /home/blockchain/peer0.org1/conf]<span class="comment"># docker-compose down</span></span><br><span class="line">Stopping peer0.org1 ... <span class="keyword">done</span></span><br><span class="line">Removing network conf_default</span><br><span class="line">ERROR: network conf_default id a3a2c67620436cc49e406a52ad724df3cbe93f965b7e4427b36ed811075d2e06 has active endpoints</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h1 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h1><ol>
<li><p>检查 network </p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@orderer0 /home/blockchain]<span class="comment"># docker network inspect conf_default</span></span><br><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">"Name"</span>: <span class="string">"conf_default"</span>,</span><br><span class="line">        <span class="string">"Id"</span>: <span class="string">"412177b0cf14414b191fc99ab4411d65c201e52424217476eb6b5cc861a5b603"</span>,</span><br><span class="line">        <span class="string">"Created"</span>: <span class="string">"2019-11-21T22:08:45.523133411+08:00"</span>,</span><br><span class="line">        <span class="string">"Scope"</span>: <span class="string">"local"</span>,</span><br><span class="line">        <span class="string">"Driver"</span>: <span class="string">"bridge"</span>,</span><br><span class="line">        <span class="string">"EnableIPv6"</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="string">"IPAM"</span>: &#123;</span><br><span class="line">            <span class="string">"Driver"</span>: <span class="string">"default"</span>,</span><br><span class="line">            <span class="string">"Options"</span>: null,</span><br><span class="line">            <span class="string">"Config"</span>: [</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="string">"Subnet"</span>: <span class="string">"172.21.0.0/16"</span>,</span><br><span class="line">                    <span class="string">"Gateway"</span>: <span class="string">"172.21.0.1"</span></span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">"Internal"</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="string">"Attachable"</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="string">"Ingress"</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="string">"ConfigFrom"</span>: &#123;</span><br><span class="line">            <span class="string">"Network"</span>: <span class="string">""</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">"ConfigOnly"</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="string">"Containers"</span>: &#123;</span><br><span class="line">            <span class="string">"19ffaa8a2c03891c1883f962e0076a04ec9461bfc8364d60052e34e5464e9762"</span>: &#123;</span><br><span class="line">                <span class="string">"Name"</span>: <span class="string">"peer0.org1"</span>, <span class="comment"># 关联的 Containers name</span></span><br><span class="line">                <span class="string">"EndpointID"</span>: <span class="string">"1f82857982ba62ce6003e15bb140686a24859ca7374bca110ab7e481af56c855"</span>,</span><br><span class="line">                <span class="string">"MacAddress"</span>: <span class="string">"02:42:ac:15:00:02"</span>,</span><br><span class="line">                <span class="string">"IPv4Address"</span>: <span class="string">"172.21.0.2/16"</span>,</span><br><span class="line">                <span class="string">"IPv6Address"</span>: <span class="string">""</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">"9c7dd8270317bb09aac306a9aa952b05fff5fa0a65ef3f4f7c4e1a5d8c03bf1e"</span>: &#123;</span><br><span class="line">                <span class="string">"Name"</span>: <span class="string">"dev-peer0.org1.finblockchain.cn-fft-2.0.0"</span>, <span class="comment"># 关联的 Containers name</span></span><br><span class="line">                <span class="string">"EndpointID"</span>: <span class="string">"33dbba6e9cc513d4e0b293fa7f2d4415bb1c13aa4d1c0c87f86d2063409b7bd1"</span>,</span><br><span class="line">                <span class="string">"MacAddress"</span>: <span class="string">"02:42:ac:15:00:03"</span>,</span><br><span class="line">                <span class="string">"IPv4Address"</span>: <span class="string">"172.21.0.3/16"</span>,</span><br><span class="line">                <span class="string">"IPv6Address"</span>: <span class="string">""</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">"Options"</span>: &#123;&#125;,</span><br><span class="line">        <span class="string">"Labels"</span>: &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
</li>
<li><p>断开关联的 Containers name 网络</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># docker network disconnect -f net_default peer0.org1</span></span><br><span class="line"><span class="comment"># docker network disconnect -f net_default dev-peer0.org1.finblockchain.cn-fft-2.0.0</span></span><br></pre></td></tr></table></figure></li>
<li><p>然后就可以正常执行</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># docker-compose down</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Youku 路由器刷 Padavan</title>
    <url>/systemops/youku-breed-padavan.html</url>
    <content><![CDATA[<div class="note warning">
            <p>警告：刷机有风险，由此产生的一切后果请自行承担！！！</p>
          </div>
<a id="more"></a>
<h2 id="require"><a href="#require" class="headerlink" title="require"></a>require</h2><ol>
<li>官改固件：YKL1_2.1.0613.8617_root_telnet.bin</li>
<li>Breed：breed-mt7620-youku-yk1.bin</li>
<li>Padavan 固件：RT-N14U-GPIO-1-youku1-128M_3.4.3.9-099.trx (2019-11-13版本)</li>
</ol>
<p>所需文件下载链接： <span class="exturl" data-url="aHR0cDovL3Bhbi5ob2tlNTguY24vaW5kZXgucGhwL3MvNUdOTkprd3J0SkRQZTRm" title="http://pan.hoke58.cn/index.php/s/5GNNJkwrtJDPe4f">http://pan.hoke58.cn/index.php/s/5GNNJkwrtJDPe4f<i class="fa fa-external-link"></i></span></p>
<h2 id="升级官改固件"><a href="#升级官改固件" class="headerlink" title="升级官改固件"></a>升级官改固件</h2><p>Breed 是必备，但是要刷 Breed 就得先刷已 root 和开启 Telnet 的固件。</p>
<ol>
<li><p>登录路由器管理界面，<code>「更多设置」</code> -&gt; <code>「系统升级」</code> -&gt; <code>「手动升级」</code>，选择前面下载的 <code>YKL1_2.1.0613.8617_root_telnet.bin</code>，点击 <code>「上传文件」</code>，等待升级包验证通过，点击<code>「立即升级」</code>，然后就等待路由器重启，这个过程中不要断开网线也不要断开电源。</p>
</li>
<li><p>重启完成后，按住路由器上 <code>RESET</code> 按键重置路由器。</p>
</li>
</ol>
<blockquote>
<p>第2步必须，否则还是无法 <code>Telnet</code> 连接路由器</p>
</blockquote>
<h2 id="刷入-Breed"><a href="#刷入-Breed" class="headerlink" title="刷入 Breed"></a>刷入 Breed</h2><ol>
<li><p>使用 shell 客户端 <code>telnet 192.168.11.1</code> 登录路由器, 如果有登录身份验证，用户名和密码都是 admin ，或者试试 root/admin 组合</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[c:\~]$ telnet 192.168.11.1</span><br><span class="line">Connecting to 192.168.11.1:23...</span><br><span class="line">Connection established.</span><br><span class="line">To escape to <span class="built_in">local</span> shell, press <span class="string">'Ctrl+Alt+]'</span>.</span><br><span class="line"> === IMPORTANT ============================</span><br><span class="line">  Use <span class="string">'passwd'</span> to <span class="built_in">set</span> your login password</span><br><span class="line">  this will <span class="built_in">disable</span> telnet and <span class="built_in">enable</span> SSH</span><br><span class="line"> ------------------------------------------</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">BusyBox v1.22.1 (2016-05-31 09:37:31 CST) built-in shell (ash)</span><br><span class="line">Enter <span class="string">'help'</span> <span class="keyword">for</span> a list of built-in commands.</span><br><span class="line"></span><br><span class="line">  _______                     ________        __              </span><br><span class="line"> |       |.-----.-----.-----.|  |  |  |.----.|  |_      </span><br><span class="line"> |   -   ||  _  |  -__|     ||  |  |  ||   _||   _|        </span><br><span class="line"> |_______||   __|_____|__|__||________||__|  |____|       </span><br><span class="line">          |__| W I R E L E S S   F R E E D O M  </span><br><span class="line"></span><br><span class="line"> -----------------------------------------------------</span><br><span class="line"> BARRIER BREAKER (Barrier Breaker, unknown)</span><br><span class="line"> -----------------------------------------------------</span><br><span class="line">  * 1/2 oz Galliano         Pour all ingredients into</span><br><span class="line">  * 4 oz cold Coffee        an irish coffee mug filled</span><br><span class="line">  * 1 1/2 oz Dark Rum       with crushed ice. Stir.</span><br><span class="line">  * 2 tsp. Creme de Cacao</span><br><span class="line"> -----------------------------------------------------</span><br><span class="line"> customized by youku, </span><br><span class="line"> copyright (c) youku, 2015. all rights reserved.</span><br></pre></td></tr></table></figure>
</li>
<li><p>导入 breed-mt7620-youku-yk1.bin 文件至路由器</p>
</li>
</ol>
<p align="center">以上步骤之后有 <b>两种选择</b>，请<b>任选其一</b>然后<b>继续后面的步骤</b>。</p>

<ul>
<li><p><strong>选择 1：U盘拷入</strong>：</p>
<ol>
<li>将 breed-mt7620-youku-yk1.bin 文件复制到U盘，U盘插上路由器</li>
<li><code>ls /mnt/sda1</code> 查看U盘里 breed-mt7620-youku-yk1.bin 文件是否存在</li>
</ol>
</li>
</ul>
<p><strong>注意：</strong>U盘未必能挂载成功。可以执行 df -h 看看有没有类似「/dev/sda1」这样的设备，然后挂载U盘：<code>mount /dev/sda1 /mnt/sda1</code> ，若挂载成功，在检查一下U盘是否有 Breed 文件。</p>
<ul>
<li><p><strong>选择 2：<code>wget</code> 下载</strong>：</p>
<ol>
<li>确保路由器能访问外网</li>
<li>执行以下命令，下载 Breed 至 <code>/tmp</code><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /tmp &amp;&amp; wget --user-agent=<span class="string">"Mozilla/5.0 (Windows; U; Windows NT 6.1; en-US) AppleWebKit/534.16 (KHTML, like Gecko) Chrome/10.0.648.204 Safari/534.16"</span> -O breed-mt7620-youku-yk1.bin <span class="string">'http://pan.hoke58.cn/index.php/s/5GNNJkwrtJDPe4f/download?path=%2F&amp;files=breed-mt7620-youku-yk1.bin'</span></span><br><span class="line">``` </span><br><span class="line"></span><br><span class="line">3. 检查 Breed 的 MD5</span><br><span class="line">```shell</span><br><span class="line">[root@Youku-router]md5sum breed-mt7620-youku-yk1.bin </span><br><span class="line">44379c40f77d3d75bcba97ce136a880d  breed-mt7620-youku-yk1.bin</span><br></pre></td></tr></table></figure>
如 MD5 不一致就重新下载！</li>
</ol>
</li>
</ul>
<ol start="4">
<li><p>解锁 Bootloader</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@Youku-router]mtd unlock Bootloader</span><br><span class="line">Unlocking Bootloader ...</span><br></pre></td></tr></table></figure>
</li>
<li><p>刷 Breed</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[root@Youku-router]mtd -r write /tmp/breed-mt7620-youku-yk1.bin Bootloader</span><br><span class="line">Unlocking Bootloader ...</span><br><span class="line"></span><br><span class="line">Writing from /tmp/breed-mt7620-youku-yk1.bin to Bootloader ...     </span><br><span class="line">Rebooting ...</span><br></pre></td></tr></table></figure>

</li>
</ol>
<p>然后路由器会自动重启, 至此 Breed 成功刷入，恭喜变成不死路由</p>
<h2 id="刷入-Padavan-固件"><a href="#刷入-Padavan-固件" class="headerlink" title="刷入 Padavan 固件"></a>刷入 Padavan 固件</h2><ol>
<li>需要有线电脑，IP设为<code>192.168.1.2</code>（新版本 Breed 设自动获取就行）</li>
<li>路由器断电，按住复位键，上电，10来秒后松手</li>
<li>电脑浏览器访问 <code>192.168.1.1</code> 进入 Breed 页面</li>
<li>固件更新，刷入老毛子固件 RT-N14U-GPIO-1-youku1-128M_3.4.3.9-099.trx 即可</li>
<li>刷好固件以后，手动断电，等待几秒，再通电开机！(路由可能无法自动开机重启)</li>
</ol>
<h2 id="Enjoy-it"><a href="#Enjoy-it" class="headerlink" title="Enjoy it"></a>Enjoy it</h2><p>Padavan 默认管理地址: <code>http://192.168.123.1</code><br>默认密码: <code>admin / admin</code><br>默认 SSID: <code>PDCN / 1234567890</code></p>
]]></content>
      <categories>
        <category>系统运维</category>
      </categories>
      <tags>
        <tag>router</tag>
        <tag>padavan</tag>
        <tag>youku</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo+NexT打造极简个人博客[持续更新]</title>
    <url>/web/deploy-hexo-next.html</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p><code>markdown</code>记录, 纯静态, <code>git</code>免费托管个人网站, 拥有网上个人小窝so easy, 来吧和我一起折腾解锁各位高阶用法</p>
<a id="more"></a>
<h2 id="环境与工具"><a href="#环境与工具" class="headerlink" title="环境与工具"></a>环境与工具</h2><ul>
<li>OS: Deepin 15.11</li>
<li>Node.js: v12.13.0</li>
<li>Npm: 6.12.0</li>
<li>Hexo: 4.0.0</li>
<li>NexT: 7.4.2</li>
<li>IDE: VS Code</li>
</ul>
<h1 id="Node-js"><a href="#Node-js" class="headerlink" title="Node.js"></a>Node.js</h1><p><span class="exturl" data-url="aHR0cHM6Ly9ub2RlanMub3JnL3poLWNuL2Rvd25sb2FkLw==" title="https://nodejs.org/zh-cn/download/">Node.js官网下载页面<i class="fa fa-external-link"></i></span>选择自己的OS版本下载部署包, 推荐长期支持版（LTS）, 因为是我Linux环境, 选择<strong>Linux 二进制文件 (x64)</strong>, 以下是我的安装步骤</p>
<ol>
<li>下载二制包并解压<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@VM-202 ~]$ wget https://nodejs.org/dist/v12.13.0/node-v12.13.0-linux-x64.tar.xz</span><br><span class="line">[root@VM-202 ~]$ sudo tar -xJvf node-v12.13.0-linux-x64.tar.xz -C /usr/local/lib</span><br><span class="line">[root@VM-202 ~]$ sudo vi /etc/profile</span><br></pre></td></tr></table></figure></li>
<li>配置<code>/etc/profile</code>, 在最后增加, 确保路径正确<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">export PATH=/usr/local/lib/node-v12.<span class="number">13.0</span>-linux-x64/bin:$PATH</span><br></pre></td></tr></table></figure></li>
<li>重载<code>/etc/profile</code>, 测试效果<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@VM-202 ~]$ sudo source /etc/profile</span><br><span class="line">[root@VM-202 ~]$ npm version</span><br><span class="line">&#123;</span><br><span class="line">  npm: '6.12.0',</span><br><span class="line">  ares: '1.15.0',</span><br><span class="line">  brotli: '1.0.7',</span><br><span class="line">  cldr: '35.1',</span><br><span class="line">  http_parser: '2.8.0',</span><br><span class="line">  icu: '64.2',</span><br><span class="line">  llhttp: '1.1.4',</span><br><span class="line">  modules: '72',</span><br><span class="line">  napi: '5',</span><br><span class="line">  nghttp2: '1.39.2',</span><br><span class="line">  node: '12.13.0',</span><br><span class="line">  openssl: '1.1.1d',</span><br><span class="line">  tz: '2019a',</span><br><span class="line">  unicode: '12.1',</span><br><span class="line">  uv: '1.32.0',</span><br><span class="line">  v8: '7.7.299.13-node.12',</span><br><span class="line">  zlib: '1.2.11'</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>配置国内镜像<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@VM-202 ~]# npm config set registry https://registry.npm.taobao.org</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 配置后可通过下面方式来验证是否成功</span></span><br><span class="line">[root@VM-202 ~]# npm config get registry</span><br></pre></td></tr></table></figure>
<h2 id="升级Node-js和NPM（可选）"><a href="#升级Node-js和NPM（可选）" class="headerlink" title="升级Node.js和NPM（可选）"></a>升级Node.js和NPM（可选）</h2></li>
<li>升级<strong>Node.js</strong><br><code>npm</code>中有一个模块叫做<code>n</code>, 专门用来管理<strong>Node.js</strong>版本的。<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@VM-202 ~]# npm install -g n</span><br><span class="line">[root@VM-202 ~]# n --help</span><br><span class="line"></span><br><span class="line">Usage: n [options] [COMMAND] [args]</span><br><span class="line"></span><br><span class="line">Commands:</span><br><span class="line"></span><br><span class="line">  n                              Display downloaded node versions and install selection</span><br><span class="line">  n latest                       Install the latest node release (downloading if necessary)</span><br><span class="line">  n lts                          Install the latest LTS node release (downloading if necessary)</span><br><span class="line">  n &lt;version&gt;                    Install node &lt;version&gt; (downloading if necessary)</span><br><span class="line">  n run &lt;version&gt; [args ...]     Execute downloaded node &lt;version&gt; with [args ...]</span><br><span class="line">  n which &lt;version&gt;              Output path for downloaded node &lt;version&gt;</span><br><span class="line">  n exec &lt;vers&gt; &lt;cmd&gt; [args...]  Execute command with modified PATH, so downloaded node &lt;version&gt; and npm first</span><br><span class="line">  n rm &lt;version ...&gt;             Remove the given downloaded version(s)</span><br><span class="line">  n prune                        Remove all downloaded versions except the installed version</span><br><span class="line">  n --latest                     Output the latest node version available</span><br><span class="line">  n --lts                        Output the latest LTS node version available</span><br><span class="line">  n ls                           Output downloaded versions</span><br><span class="line">  n ls-remote [version]          Output matching versions available for download</span><br><span class="line">  n uninstall                    Remove the installed node and npm</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line"></span><br><span class="line">  -V, --version   Output version of n</span><br><span class="line">  -h, --help      Display help information</span><br><span class="line">  -q, --quiet     Disable curl output (if available)</span><br><span class="line">  -d, --download  Download only</span><br><span class="line">  -a, --arch      Override system architecture</span><br><span class="line">  --all           ls-remote displays all matches instead of last 20</span><br><span class="line">  --insecure      Turn off certificate checking for https requests (may be needed from behind a proxy server)</span><br><span class="line"></span><br><span class="line">Aliases:</span><br><span class="line"></span><br><span class="line">  which: bin</span><br><span class="line">  run: use, as</span><br><span class="line">  ls: list</span><br><span class="line">  lsr: ls-remote</span><br><span class="line">  rm: -</span><br><span class="line">  lts: stable</span><br><span class="line">  latest: current</span><br><span class="line"></span><br><span class="line">Versions:</span><br><span class="line"></span><br><span class="line">  Numeric version numbers can be complete or incomplete, with an optional leading 'v'.</span><br><span class="line">  Versions can also be specified by label, or codename,</span><br><span class="line">  and other downloadable releases by &lt;remote-folder&gt;/&lt;version&gt;</span><br><span class="line"></span><br><span class="line">    4.9.1, 8, v6.1    Numeric versions</span><br><span class="line">    lts               Newest Long Term Support official release</span><br><span class="line">    latest, current   Newest official release</span><br><span class="line">    boron, carbon     Codenames for release streams</span><br><span class="line">    and nightly, chakracore-release/latest, rc/10 et al</span><br></pre></td></tr></table></figure>
安装最新<code>LTS</code>版<strong>Node.js</strong><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">[<span class="symbol">root@</span>VM<span class="number">-202</span> ~]#n lts</span><br></pre></td></tr></table></figure></li>
<li>升级<strong>NPM</strong><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@VM-202 ~]# npm -g install npm</span><br><span class="line">/usr/local/bin/npm -&gt; /usr/local/lib/node_modules/npm/bin/npm-cli.js</span><br><span class="line">/usr/local/bin/npx -&gt; /usr/local/lib/node_modules/npm/bin/npx-cli.js</span><br><span class="line">+ npm@6.13.0</span><br><span class="line">added 2 packages from 2 contributors, removed 2 packages and updated 15 packages in 7.73s</span><br></pre></td></tr></table></figure></li>
<li>注释<code>/etc/profile</code>中老版本的配置<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="built_in">export</span> PATH=/usr/<span class="built_in">local</span>/lib/node-v12.13.0-linux-x64/bin:<span class="variable">$PATH</span></span></span><br></pre></td></tr></table></figure>

</li>
</ol>
<blockquote>
<p><strong>windows</strong>的童鞋可参考<span class="exturl" data-url="aHR0cDovL3d3dy5ydW5vb2IuY29tL25vZGVqcy9ub2RlanMtaW5zdGFsbC1zZXR1cC5odG1s" title="http://www.runoob.com/nodejs/nodejs-install-setup.html">菜鸟教程<i class="fa fa-external-link"></i></span></p>
</blockquote>
<h1 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h1><p><strong>Linux</strong>系统下安装Git非常简单, 用包管理命令: </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt-get install git</span><br><span class="line"></span><br><span class="line">yum install git</span><br></pre></td></tr></table></figure>
<p><strong>windows</strong>下就直接到<em><span class="exturl" data-url="aHR0cHM6Ly9naXQtc2NtLmNvbS9kb3dubG9hZC93aW4=" title="https://git-scm.com/download/win">Git官网<i class="fa fa-external-link"></i></span></em> 下载安装即可</p>
<p>安装完成后执行 <code>git --version</code> 验证是否成功</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@VM-202 ~]# git --version</span><br><span class="line">git version 2.17.0</span><br></pre></td></tr></table></figure>
<h1 id="Hexo"><a href="#Hexo" class="headerlink" title="Hexo"></a>Hexo</h1><p>安装<strong>Hexo</strong>只需一条命令, 详细移步至<span class="exturl" data-url="aHR0cHM6Ly9oZXhvLmlvL3poLWNuL2RvY3Mv" title="https://hexo.io/zh-cn/docs/">官档<i class="fa fa-external-link"></i></span>, 重点说常用命令和配置</p>
<figure class="highlight avrasm"><table><tr><td class="code"><pre><span class="line">npm install -g hexo-<span class="keyword">cli</span></span><br></pre></td></tr></table></figure>
<h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo init &lt;folder&gt; # 初始化一个网站. 如果没有设置 folder , Hexo 默认在目前的文件夹建立网站</span><br><span class="line">hexo new &lt;layout&gt; &lt;title&gt; # 新建一篇文章. 如果没有设置 layout 的话, 默认使用 _config.yml 中的 default_layout 参数代替. 如果标题包含空格的话, 请使用引号括起来</span><br><span class="line">hexo clean # 清除缓存文件 (db.json) 和已生成的静态文件 (public)</span><br><span class="line">hexo g # 等于hexo generate # 生成静态文件</span><br><span class="line">hexo s # 等于hexo server # 本地预览</span><br><span class="line">hexo d # 等于hexo deploy # 部署, 可与hexo g合并为 hexo d -g</span><br><span class="line">hexo version # 查看版本</span><br></pre></td></tr></table></figure>
<h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><blockquote>
<p>注意<code>_config.yml</code>的区分：<code>hexo init</code>生成的目录下的<code>_config.yml</code>为<font color=red>Hexo配置文件</font>, <code>themes</code>目录下主题文件夹里的 <code>_config.yml</code>为<font color=red>主题配置文件</font>, 如<code>themes\next\_config.yml</code>。</p>
</blockquote>
<p>我的Hexo配置文件<code>_config.yml</code></p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">title:</span> <span class="string">Hoke's</span> <span class="string">blog</span></span><br><span class="line"><span class="attr">subtitle:</span> <span class="string">何可的博客</span></span><br><span class="line"><span class="attr">description:</span> <span class="string">一名追求简单实用的运维开发工程师</span></span><br><span class="line"><span class="attr">keywords:</span> <span class="string">何可,</span> <span class="string">hoke,</span> <span class="string">hoke58,</span> <span class="string">hoke58.cn,</span> <span class="string">博客,</span> <span class="string">个人博客,</span> <span class="string">个人网站,</span> <span class="string">devops,</span> <span class="string">运维,</span> <span class="string">运维开发</span></span><br><span class="line"><span class="attr">author:</span> <span class="string">Hoke</span></span><br><span class="line"><span class="attr">language:</span> <span class="string">zh-CN</span></span><br><span class="line"><span class="attr">timezone:</span> <span class="string">Asia/Shanghai</span></span><br><span class="line"><span class="attr">url:</span> <span class="attr">http://www.hoke58.cn</span></span><br><span class="line"><span class="attr">root:</span> <span class="string">/</span></span><br><span class="line"><span class="attr">permalink:</span> <span class="string">:category/:title.html</span></span><br><span class="line"><span class="attr">permalink_defaults:</span></span><br><span class="line"><span class="attr">pretty_urls:</span></span><br><span class="line"><span class="attr">  trailing_index:</span> <span class="literal">false</span> <span class="comment"># Set to false to remove trailing index.html from permalinks</span></span><br><span class="line"><span class="attr">source_dir:</span> <span class="string">source</span></span><br><span class="line"><span class="attr">public_dir:</span> <span class="string">public</span></span><br><span class="line"><span class="attr">tag_dir:</span> <span class="string">tags</span></span><br><span class="line"><span class="attr">archive_dir:</span> <span class="string">archives</span></span><br><span class="line"><span class="attr">category_dir:</span> <span class="string">categories</span></span><br><span class="line"><span class="attr">code_dir:</span> <span class="string">downloads/code</span></span><br><span class="line"><span class="attr">i18n_dir:</span> <span class="string">:lang</span></span><br><span class="line"><span class="attr">skip_render:</span></span><br><span class="line"><span class="attr">new_post_name:</span> <span class="string">:title.md</span> <span class="comment"># File name of new posts</span></span><br><span class="line"><span class="attr">default_layout:</span> <span class="string">post</span></span><br><span class="line"><span class="attr">titlecase:</span> <span class="literal">false</span> <span class="comment"># Transform title into titlecase</span></span><br><span class="line"><span class="attr">external_link:</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">true</span> <span class="comment"># Open external links in new tab</span></span><br><span class="line"><span class="attr">  field:</span> <span class="string">site</span> <span class="comment"># Apply to the whole site</span></span><br><span class="line"><span class="attr">  exclude:</span></span><br><span class="line"><span class="attr">filename_case:</span> <span class="number">0</span></span><br><span class="line"><span class="attr">render_drafts:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">post_asset_folder:</span> <span class="literal">false</span> <span class="comment"># 启动asset文件夹</span></span><br><span class="line"><span class="attr">relative_link:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">future:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">highlight:</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  line_number:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  auto_detect:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  tab_replace:</span></span><br><span class="line"><span class="attr">index_generator:</span></span><br><span class="line"><span class="attr">  path:</span> <span class="string">''</span></span><br><span class="line"><span class="attr">  per_page:</span> <span class="number">10</span></span><br><span class="line"><span class="attr">  order_by:</span> <span class="bullet">-date</span></span><br><span class="line"><span class="attr">default_category:</span> <span class="string">uncategorized</span></span><br><span class="line"><span class="attr">category_map:</span></span><br><span class="line">  <span class="string">系统运维:</span> <span class="string">systemops</span></span><br><span class="line"><span class="attr">  DevOps:</span> <span class="string">devops</span></span><br><span class="line"><span class="attr">  Web:</span> <span class="string">web</span></span><br><span class="line">  <span class="string">数据库:</span> <span class="string">databases</span></span><br><span class="line"><span class="attr">  Docker:</span> <span class="string">docker</span></span><br><span class="line">  <span class="string">开发:</span> <span class="string">development</span></span><br><span class="line">  <span class="string">监控:</span> <span class="string">monitor</span></span><br><span class="line"><span class="attr">tag_map:</span></span><br><span class="line">  </span><br><span class="line"><span class="attr">meta_generator:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">date_format:</span> <span class="string">YYYY-MM-DD</span></span><br><span class="line"><span class="attr">time_format:</span> <span class="attr">HH:mm:ss</span></span><br><span class="line"><span class="attr">use_date_for_updated:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">per_page:</span> <span class="number">10</span></span><br><span class="line"><span class="attr">pagination_dir:</span> <span class="string">page</span></span><br><span class="line"><span class="attr">theme:</span> <span class="string">next</span></span><br><span class="line"><span class="attr">symbols_count_time:</span></span><br><span class="line"><span class="attr">  symbols:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  time:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  total_symbols:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  total_time:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line"><span class="attr">  type:</span> <span class="string">git</span></span><br><span class="line"><span class="attr">  repo:</span> <span class="attr">https://github.com/hoke58/hoke58.github.io</span></span><br><span class="line"><span class="attr">  branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure>
<p>我的Hexo应用程序信息<code>package.json</code></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"hexo-site"</span>,</span><br><span class="line">  <span class="attr">"version"</span>: <span class="string">"0.0.0"</span>,</span><br><span class="line">  <span class="attr">"private"</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">"scripts"</span>: &#123;</span><br><span class="line">    <span class="attr">"build"</span>: <span class="string">"hexo generate"</span>,</span><br><span class="line">    <span class="attr">"clean"</span>: <span class="string">"hexo clean"</span>,</span><br><span class="line">    <span class="attr">"deploy"</span>: <span class="string">"hexo deploy"</span>,</span><br><span class="line">    <span class="attr">"server"</span>: <span class="string">"hexo server"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"hexo"</span>: &#123;</span><br><span class="line">    <span class="attr">"version"</span>: <span class="string">"4.0.0"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"dependencies"</span>: &#123;</span><br><span class="line">    <span class="attr">"hexo"</span>: <span class="string">"^4.0.0"</span>,</span><br><span class="line">    <span class="attr">"hexo-generator-archive"</span>: <span class="string">"^1.0.0"</span>,</span><br><span class="line">    <span class="attr">"hexo-generator-category"</span>: <span class="string">"^1.0.0"</span>,</span><br><span class="line">    <span class="attr">"hexo-generator-index"</span>: <span class="string">"^1.0.0"</span>,</span><br><span class="line">    <span class="attr">"hexo-generator-tag"</span>: <span class="string">"^1.0.0"</span>,</span><br><span class="line">    <span class="attr">"hexo-related-popular-posts"</span>: <span class="string">"^3.0.6"</span>,</span><br><span class="line">    <span class="attr">"hexo-renderer-ejs"</span>: <span class="string">"^1.0.0"</span>,</span><br><span class="line">    <span class="attr">"hexo-renderer-marked"</span>: <span class="string">"^2.0.0"</span>,</span><br><span class="line">    <span class="attr">"hexo-renderer-stylus"</span>: <span class="string">"^1.1.0"</span>,</span><br><span class="line">    <span class="attr">"hexo-server"</span>: <span class="string">"^1.0.0"</span>,</span><br><span class="line">    <span class="attr">"hexo-symbols-count-time"</span>: <span class="string">"^0.6.3"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="NexT"><a href="#NexT" class="headerlink" title="NexT"></a>NexT</h1><p>使用 <code>Hexo</code> 也是因为喜欢 <code>NexT</code> 模板, 简单漂亮。本章节主要介绍安装、配置、自定义页面模板</p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>最简单的安装方式是直接克隆整个仓库：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> &lt;hexo-init-folder&gt;</span><br><span class="line">$ git <span class="built_in">clone</span> https://github.com/theme-next/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure>
<p>此外, 如果你想要使用其他方式, 你也可以参见<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3RoZW1lLW5leHQvaGV4by10aGVtZS1uZXh0L2Jsb2IvbWFzdGVyL2RvY3MvemgtQ04vSU5TVEFMTEFUSU9OLm1k" title="https://github.com/theme-next/hexo-theme-next/blob/master/docs/zh-CN/INSTALLATION.md">详细安装步骤<i class="fa fa-external-link"></i></span>。</p>
<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>在开始之前需要先将 Hexo 默认的主题配置改为 NexT</p>
<p>打开 <strong>Hexo 配置文件</strong>, 找到 <code>theme</code> 字段, 并将其值更改为 <code>next</code></p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">theme:</span> <span class="string">next</span></span><br></pre></td></tr></table></figure>
<p>然后 <code>hexo clean &amp;&amp; hexo g -d &amp;&amp; hexo s</code> 即可预览 NexT 默认的主题效果</p>
<h3 id="数据文件"><a href="#数据文件" class="headerlink" title="数据文件"></a>数据文件</h3><p>当使用 <code>git pull</code> 更新 NexT 主题时经常需要解决冲突问题, 而在手动下载 release 版本时也经常需要手动合并配置, 所以为了解决版本冲突的问题我们使用 NexT 的数据文件</p>
<p>如果在新的 release 中出现了任何新的选项, 那么你只需要从 <code>/themes/next/_config.yml</code> 中将他们复制到 <code>/source/_data/next.yml</code> 中并设置它们的值为你想要的选项。</p>
<h4 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h4><ol>
<li>请确认你的 Hexo 版本为 3.0 或更高。</li>
<li>在你站点的 <code>/source/_data</code> 目录创建一个 <code>next.yml</code> 文件（如果 <code>_data</code> 目录不存在, 请创建之）。</li>
</ol>
<p align="center">以上步骤之后有 <b>两种选择</b>, 请<b>任选其一</b>然后<b>继续后面的步骤</b>。</p>

<ul>
<li><p><strong>选择 1：<code>override: false</code>（默认）</strong>：</p>
<ol>
<li>检查默认 NexT 配置中的 <code>override</code> 选项, 必须设置为 <code>false</code>。<br>在 <code>next.yml</code> 文件中, 也要设置为 <code>false</code>, 或者不定义此选项。</li>
<li>从站点配置文件（<code>/_config.yml</code>）与主题配置文件（<code>/themes/next/_config.yml</code>）中复制你需要的选项到 <code>/source/_data/next.yml</code> 中。</li>
</ol>
</li>
<li><p><strong>选择 2：<code>override: true</code></strong>：</p>
<ol>
<li>在 <code>next.yml</code> 中设置 <code>override</code> 选项为 <code>true</code>。</li>
<li>从 <code>/themes/next/_config.yml</code> 配置文件中复制<strong>所有</strong>的 NexT 主题选项到 <code>/source/_data/next.yml</code> 中。</li>
</ol>
</li>
</ul>
<ol start="3">
<li>然后, 在站点的 <code>/_config.yml</code> 中需要定义 <code>theme: next</code> 选项（如果需要的话, <code>source_dir: source</code>）。</li>
<li>使用标准参数来启动服务器, 生成或部署（<code>hexo clean &amp;&amp; hexo g -d &amp;&amp; hexo s</code>）。</li>
</ol>
<p>最佳实践为<strong>选择 1</strong> , copy 需要修改的选项至 <code>next.yml</code> , 配置文件中的注释说明基本够用, 不清楚地参考<span class="exturl" data-url="aHR0cDovL3RoZW1lLW5leHQuaWlzc25hbi5jb20vZ2V0dGluZy1zdGFydGVkLmh0bWw=" title="http://theme-next.iissnan.com/getting-started.html">NexT官方文档<i class="fa fa-external-link"></i></span>和<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2lpc3NuYW4vaGV4by10aGVtZS1uZXh0" title="https://github.com/iissnan/hexo-theme-next">NexT github<i class="fa fa-external-link"></i></span>, <code>NexT github</code>托管项目 <code>docs</code> 目录下有markdown文档, 有中文版的哦。</p>
<h3 id="自定义-scheme"><a href="#自定义-scheme" class="headerlink" title="自定义 scheme"></a><del>自定义 scheme</del></h3><div class="note info">
            <p>不建议自定义，如果官方对 scheme 有更新，需要人工检查原 scheme 的修改内容，再更新至新增的自定义 scheme，费事儿</p>
          </div>

<p><del>由于我对 scheme 修改较多, 怕 <code>git pull</code> 更新时报冲突, 干脆直接新增专用 scheme , 以下是基本思路：</del></p>
<ol>
<li>选择中意的 schemes 我是基于 Mist 基础上修改的, 在<code>/themes/next/source/css/_schemes</code>下复制 <code>Mist</code> 为 <code>Hoke</code> （自定义）</li>
<li><code>/themes/next/source/css/_variables</code>下 复制 <code>Mist.styl</code> 为 <code>Hoke.styl</code></li>
<li>全局搜索 <code>Mist</code> 在匹配到的文件中按照 <code>Mist</code> 新增 <code>Hoke</code> 部分<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@VM-202 /home/hoke/Documents/blog/themes/next]<span class="comment"># git diff scripts/filters/minify.js </span></span><br><span class="line">diff --git a/scripts/filters/minify.js b/scripts/filters/minify.js</span><br><span class="line">index 6640242..6238bbc 100644</span><br><span class="line">--- a/scripts/filters/minify.js</span><br><span class="line">+++ b/scripts/filters/minify.js</span><br><span class="line">@@ -50,4 +50,7 @@ hexo.extend.filter.register(<span class="string">'after_generate'</span>, () =&gt; &#123;</span><br><span class="line">   &#125; <span class="keyword">else</span> <span class="keyword">if</span> (theme.scheme === <span class="string">'Pisces'</span> || theme.scheme === <span class="string">'Gemini'</span>) &#123;</span><br><span class="line">     hexo.route.remove(<span class="string">'js/schemes/muse.js'</span>);</span><br><span class="line">   &#125;</span><br><span class="line">+  <span class="keyword">if</span> (theme.scheme === <span class="string">'Hoke'</span>) &#123;</span><br><span class="line">+    hexo.route.remove(<span class="string">'js/local-search.js'</span>);</span><br><span class="line">+  &#125;</span><br><span class="line"> &#125;);</span><br><span class="line"></span><br><span class="line">[root@VM-202 /home/hoke/Documents/blog/themes/next]<span class="comment"># git diff source/css/_common/outline/header/github-banner.styl </span></span><br><span class="line">diff --git a/<span class="built_in">source</span>/css/_common/outline/header/github-banner.styl b/<span class="built_in">source</span>/css/_common/outline/header/github-banner.styl</span><br><span class="line">index 42a433a..434c08d 100644</span><br><span class="line">--- a/<span class="built_in">source</span>/css/_common/outline/header/github-banner.styl</span><br><span class="line">+++ b/<span class="built_in">source</span>/css/_common/outline/header/github-banner.styl</span><br><span class="line">@@ -47,7 +47,7 @@</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">-  <span class="keyword">if</span> (<span class="variable">$scheme</span> == <span class="string">'Mist'</span>) &#123;</span><br><span class="line">+  <span class="keyword">if</span> (<span class="variable">$scheme</span> == <span class="string">'Mist'</span>) || (<span class="variable">$scheme</span>.scheme === <span class="string">'Hoke'</span>) &#123;</span><br><span class="line">     +<span class="function"><span class="title">mobile</span></span>() &#123;</span><br><span class="line">       svg &#123;</span><br><span class="line">         top: inherit;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[root@VM-202 /home/hoke/Documents/blog/themes/next]<span class="comment"># git diff source/js/utils.js </span></span><br><span class="line">diff --git a/<span class="built_in">source</span>/js/utils.js b/<span class="built_in">source</span>/js/utils.js</span><br><span class="line">index a249585..754423f 100644</span><br><span class="line">--- a/<span class="built_in">source</span>/js/utils.js</span><br><span class="line">+++ b/<span class="built_in">source</span>/js/utils.js</span><br><span class="line">@@ -335,6 +335,10 @@ NexT.utils = &#123;</span><br><span class="line">     <span class="built_in">return</span> CONFIG.scheme === <span class="string">'Mist'</span>;</span><br><span class="line">   &#125;,</span><br><span class="line"> </span><br><span class="line">+  isHoke: <span class="function"><span class="title">function</span></span>() &#123;</span><br><span class="line">+    <span class="built_in">return</span> CONFIG.scheme === <span class="string">'Hoke'</span>;</span><br><span class="line">+  &#125;, </span><br><span class="line">+</span><br><span class="line">   isPisces: <span class="function"><span class="title">function</span></span>() &#123;</span><br><span class="line">     <span class="built_in">return</span> CONFIG.scheme === <span class="string">'Pisces'</span>;</span><br><span class="line">   &#125;,</span><br></pre></td></tr></table></figure></li>
<li><code>/source/_data/next.yml</code> 新增 scheme<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#scheme: Muse</span></span><br><span class="line"><span class="comment">#scheme: Mist</span></span><br><span class="line"><span class="comment">#scheme: Pisces</span></span><br><span class="line"><span class="comment">#scheme: Gemini</span></span><br><span class="line"><span class="attr">scheme:</span> <span class="string">Hoke</span></span><br></pre></td></tr></table></figure></li>
<li>执行 <code>hexo clean &amp;&amp; hexo g &amp;&amp; hexo s</code> 可预览效果, 如果遇报错别慌, 看一下报错的文件是不是哪个地方还漏改啦</li>
</ol>
<p>成功之后就可以在自定义的 scheme 上折腾啦！</p>
<h1 id="Git-及源码管理"><a href="#Git-及源码管理" class="headerlink" title="Git 及源码管理"></a>Git 及源码管理</h1><p>安装 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2hleG9qcy9oZXhvLWRlcGxveWVyLWdpdA==" title="https://github.com/hexojs/hexo-deployer-git">hexo-deployer-git<i class="fa fa-external-link"></i></span></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>

<h2 id="GitHub"><a href="#GitHub" class="headerlink" title="GitHub"></a>GitHub</h2><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tLw==" title="https://github.com/">Github<i class="fa fa-external-link"></i></span> 需要开通 <span class="exturl" data-url="aHR0cHM6Ly9wYWdlcy5naXRodWIuY29tLw==" title="https://pages.github.com/">Github Page<i class="fa fa-external-link"></i></span> , 网上一搜一大把, 不啰嗦啦</p>
<p>打 Hexo 配置文件 <code>_config.yml</code> , 拉到底部, 修改部署配置: </p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line"><span class="attr">  type:</span> <span class="string">git</span></span><br><span class="line"><span class="attr">  repo:</span> <span class="attr">https://github.com/hoke58/hoke58.github.io</span></span><br><span class="line"><span class="attr">  branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure>
<p>执行 <code>hexo clean &amp;&amp; hexo g -d</code> , 输入 Git 的账号和密码,完成后在浏览器输入 <code>yourName.github.io</code>, Enjoy it!</p>
<h2 id="Coding-or-Gitee"><a href="#Coding-or-Gitee" class="headerlink" title="Coding or Gitee"></a>Coding or Gitee</h2><blockquote>
<p>Gitee Pages 免费版不支持自定义域名，放弃转 coding</p>
</blockquote>
<p>登录 <span class="exturl" data-url="aHR0cHM6Ly9jb2RpbmcubmV0" title="https://coding.net">Coding<i class="fa fa-external-link"></i></span> 创建一个同名账号的 repository ，在项目仓库内一键开通 Pages 服务</p>
<p>打 Hexo 配置文件 <code>_config.yml</code> , 拉到底部, 修改部署配置: </p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line"><span class="attr">  type:</span> <span class="string">git</span></span><br><span class="line"><span class="attr">  repo:</span> </span><br><span class="line"><span class="attr">    github:</span> <span class="attr">https://github.com/hoke58/hoke58.github.io</span></span><br><span class="line"><span class="attr">    coding:</span> <span class="attr">https://git.coding.net/hoke58/hoke58.git</span></span><br><span class="line"><span class="attr">  branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure>
<p>执行 <code>hexo clean &amp;&amp; hexo g -d</code> , 输入 Git 的账号和密码, 完成后在浏览器输入 <code>yourName.coding.me</code> 测试</p>
<h2 id="网站源码管理最佳实践"><a href="#网站源码管理最佳实践" class="headerlink" title="网站源码管理最佳实践"></a>网站源码管理最佳实践</h2><p>本节主要介绍如何管理网站源码</p>
<h3 id="NexT-源码"><a href="#NexT-源码" class="headerlink" title="NexT 源码"></a>NexT 源码</h3><p>大家总会对 NexT 自定义修改，目标是管理自定义修改源码兼顾 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3RoZW1lLW5leHQvaGV4by10aGVtZS1uZXh0" title="https://github.com/theme-next/hexo-theme-next">hexo-theme-next 官方<i class="fa fa-external-link"></i></span>更新，涉及 Git 基础知识。</p>
<ol>
<li><p><code>cd themes/next</code> 进入 NexT 主题目录，本地仓库创建自己源码分支 <code>git checkout -b &lt;branch&gt;</code>, 并在该分支上修改自己的配置，源码</p>
</li>
<li><p>修改后的内容提交本地仓库</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">'注释'</span></span><br></pre></td></tr></table></figure></li>
<li><p>Fork <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3RoZW1lLW5leHQvaGV4by10aGVtZS1uZXh0" title="https://github.com/theme-next/hexo-theme-next">hexo-theme-next<i class="fa fa-external-link"></i></span> 至自己的 Github 仓库</p>
</li>
<li><p>执行以下命令添加自己的 Fork 的仓库</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git remote add github git@github.com:theme-next/hexo-theme-next.git <span class="comment"># 记得替换成自己的仓库</span></span><br><span class="line">git remote -v <span class="comment"># 添加成功后检查</span></span><br></pre></td></tr></table></figure></li>
<li><p>把当前分支推送自己 Github 远程库</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ git push -u github hoke</span><br><span class="line">Counting objects: 46, <span class="keyword">done</span>.</span><br><span class="line">Delta compression using up to 4 threads.</span><br><span class="line">Compressing objects: 100% (46/46), <span class="keyword">done</span>.</span><br><span class="line">Writing objects: 100% (46/46), 287.64 KiB | 932.00 KiB/s, <span class="keyword">done</span>.</span><br><span class="line">Total 46 (delta 18), reused 0 (delta 0)</span><br><span class="line">remote: Resolving deltas: 100% (18/18), completed with 12 <span class="built_in">local</span> objects.</span><br><span class="line">remote: </span><br><span class="line">remote: Create a pull request <span class="keyword">for</span> <span class="string">'hoke'</span> on GitHub by visiting:</span><br><span class="line">remote:      https://github.com/hoke58/hexo-theme-next/pull/new/hoke</span><br><span class="line">remote: </span><br><span class="line">To github.com:hoke58/hexo-theme-next.git</span><br><span class="line"> * [new branch]      hoke -&gt; hoke</span><br><span class="line">Branch <span class="string">'hoke'</span> <span class="built_in">set</span> up to track remote branch <span class="string">'hoke'</span> from <span class="string">'origin'</span>.</span><br></pre></td></tr></table></figure>
<h3 id="Hexo-站点源码管理"><a href="#Hexo-站点源码管理" class="headerlink" title="Hexo 站点源码管理"></a>Hexo 站点源码管理</h3><div class="note success">
            <p>目标： 站点源码和托管在 Github 上的的静态资源同一个仓库，不同分支；站点源码库引用 NexT 源码仓库为子模块</p>
          </div>
</li>
<li><p>进入站点根目录初始化 Git 仓库 <code>git init</code></p>
</li>
<li><p>创建并切换分支 <code>git checkout -b source</code></p>
</li>
<li><p>删除或移走 NexT 主题 <code>mv themes/next /tmp</code></p>
</li>
<li><p>（可选）如果之前已生成 Git 仓库，先删除仓库中的 NexT <code>git -rm themes/next</code></p>
</li>
<li><p>添加子模块，成功后会生成 <code>.gitmodules</code></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git submodule add -b hoke git@github.com:hoke58/hexo-theme-next.git themes/hexo-theme-next/</span><br></pre></td></tr></table></figure></li>
<li><p>提交本地仓库</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">'新增子模块'</span></span><br></pre></td></tr></table></figure></li>
<li><p>本地 source 分支推送自己远程库 source 分支</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ git push -u origin <span class="built_in">source</span></span><br></pre></td></tr></table></figure></li>
<li><p>Github 网页上查看是否成功</p>
</li>
</ol>
<div class="note info">
            <p><code>git submodule</code> 更多说明移步 <span class="exturl" data-url="aHR0cHM6Ly9naXQtc2NtLmNvbS9ib29rL3poL3YxL0dpdC0lRTUlQjclQTUlRTUlODUlQjctJUU1JUFEJTkwJUU2JUE4JUExJUU1JTlEJTk3" title="https://git-scm.com/book/zh/v1/Git-%E5%B7%A5%E5%85%B7-%E5%AD%90%E6%A8%A1%E5%9D%97">Git 工具 - 子模块<i class="fa fa-external-link"></i></span></p>
          </div>

<h1 id="图床"><a href="#图床" class="headerlink" title="图床"></a><span class="exturl" data-url="aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTUlOUIlQkUlRTUlQkElOEE=" title="https://baike.baidu.com/item/%E5%9B%BE%E5%BA%8A">图床<i class="fa fa-external-link"></i></span></h1><p>选型之前先做了一波调研，主要就<span class="exturl" data-url="aHR0cHM6Ly9wb3J0YWwucWluaXUuY29tL3NpZ251cD9jb2RlPTFoZXRpajZ3MnpxNnE=" title="https://portal.qiniu.com/signup?code=1hetij6w2zq6q">七牛<i class="fa fa-external-link"></i></span>和<span class="exturl" data-url="aHR0cHM6Ly9jb25zb2xlLnVweXVuLmNvbS9yZWdpc3Rlci8/aW52aXRlPXJ5dUh1MzcyUw==" title="https://console.upyun.com/register/?invite=ryuHu372S">又拍云<i class="fa fa-external-link"></i></span>, 因为需要使用 <code>CDN</code> , 简单说明:</p>
<ul>
<li>又拍云：10G 免费空间, 15G 流量, 支持 https, 需ICP备案</li>
<li>七牛云：10G 免费空间, 10G 流量, 免费版不支持 https, 需ICP、公安备案</li>
</ul>
<p><code>https</code> 已是趋势，<span class="exturl" data-url="aHR0cHM6Ly9jb25zb2xlLnVweXVuLmNvbS9yZWdpc3Rlci8/aW52aXRlPXJ5dUh1MzcyUw==" title="https://console.upyun.com/register/?invite=ryuHu372S">又拍云<i class="fa fa-external-link"></i></span>亦是老牌的 CDN</p>
<h2 id="又拍云"><a href="#又拍云" class="headerlink" title="又拍云"></a>又拍云</h2><ol>
<li>注册<span class="exturl" data-url="aHR0cHM6Ly9jb25zb2xlLnVweXVuLmNvbS9yZWdpc3Rlci8/aW52aXRlPXJ5dUh1MzcyUw==" title="https://console.upyun.com/register/?invite=ryuHu372S">又拍云<i class="fa fa-external-link"></i></span>，个人站点申请个人账号即可</li>
<li>注册成功后进入控台，点击「云存储」- 「立即使用」<br><img src="https://upyun.hoke58.cn/img/deploy-hexo-next-20191121160122.png" alt="deploy-hexo-next-20191121160122.png"></li>
<li>点击传送门<span class="exturl" data-url="aHR0cHM6Ly9oZWxwLnVweXVuLmNvbS9rbm93bGVkZ2UtYmFzZS9xdWlja19zdGFydC8=" title="https://help.upyun.com/knowledge-base/quick_start/">开始使用又拍云存储<i class="fa fa-external-link"></i></span>，在「云存储」页面点击创建服务。</li>
<li>服务创建后，点击「配置」，根据自己的需求配置，晒一下我修改的部分<br><img src="https://upyun.hoke58.cn/img/deploy-hexo-next-20191121161742.png" alt="deploy-hexo-next-20191121161742.png"><br><img src="https://upyun.hoke58.cn/img/deploy-hexo-next-20191121161831.png" alt="deploy-hexo-next-20191121161831.png"><br><img src="https://upyun.hoke58.cn/img/deploy-hexo-next-20191121161910.png" alt="deploy-hexo-next-20191121161910.png"><br><img src="https://upyun.hoke58.cn/img/deploy-hexo-next-20191121162031.png" alt="deploy-hexo-next-20191121162031.png"></li>
<li>使用 FTP 工具上传图片，传送门 <span class="exturl" data-url="aHR0cHM6Ly9oZWxwLnVweXVuLmNvbS9rbm93bGVkZ2UtYmFzZS9kZXZlbG9wZXJfdG9vbHMvI2Z0cGZ0cHM=" title="https://help.upyun.com/knowledge-base/developer_tools/#ftpftps">FTP/FTPS<i class="fa fa-external-link"></i></span>, 文件上传后可以网页上查看<br><img src="https://upyun.hoke58.cn/img/deploy-hexo-next-20191121162515.png" alt="deploy-hexo-next-20191121162515.png"></li>
<li>至此，又拍云图床服务就 OK 啦！最后也是最重要的<span class="exturl" data-url="aHR0cHM6Ly93d3cudXB5dW4uY29tL2xlYWd1ZQ==" title="https://www.upyun.com/league">加入又拍云联盟<i class="fa fa-external-link"></i></span>。下载logo，选个适合自己风格的logo把链接和logo加入网站页脚，申请后五个工作日内会有结果。</li>
</ol>
<h3 id="NexT-页脚悬挂又拍云联盟-Logo"><a href="#NexT-页脚悬挂又拍云联盟-Logo" class="headerlink" title="NexT 页脚悬挂又拍云联盟 Logo"></a>NexT 页脚悬挂<span class="exturl" data-url="aHR0cHM6Ly93d3cudXB5dW4uY29tL2xlYWd1ZQ==" title="https://www.upyun.com/league">又拍云联盟<i class="fa fa-external-link"></i></span> Logo</h3><p>先上一下效果图<br><img src="https://upyun.hoke58.cn/img/deploy-hexo-next-20191121163236.png" alt="deploy-hexo-next-20191121163236.png"></p>
<p>NexT 主题仓库修改：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">diff --git a/languages/en.yml b/languages/en.yml</span><br><span class="line">index 84e0700..64d61e4 100644</span><br><span class="line">--- a/languages/en.yml</span><br><span class="line">+++ b/languages/en.yml</span><br><span class="line">@@ -49,6 +49,8 @@ footer:</span><br><span class="line">   theme: Theme</span><br><span class="line">   total_views: Total Views</span><br><span class="line">   total_visitors: Total Visitors</span><br><span class="line">+  cdn: CDN by</span><br><span class="line">+  hosted: Hosted by</span><br><span class="line"> </span><br><span class="line"> counter:</span><br><span class="line">   tag_cloud:</span><br><span class="line">diff --git a/languages/zh-CN.yml b/languages/zh-CN.yml</span><br><span class="line">index e816ff2..79bad18 100644</span><br><span class="line">--- a/languages/zh-CN.yml</span><br><span class="line">+++ b/languages/zh-CN.yml</span><br><span class="line">@@ -45,6 +45,8 @@ footer:</span><br><span class="line">   theme: 主题</span><br><span class="line">   total_views: 总访问量</span><br><span class="line">   total_visitors: 总访客量</span><br><span class="line">+  cdn: CDN 加速</span><br><span class="line">+  hosted: 主机托管于</span><br><span class="line"> counter:</span><br><span class="line">   tag_cloud:</span><br><span class="line">     zero: 暂无标签</span><br><span class="line">diff --git a/layout/_partials/footer.swig b/layout/_partials/footer.swig</span><br><span class="line">index 1923d8a..b7fed25 100644</span><br><span class="line">--- a/layout/_partials/footer.swig</span><br><span class="line">+++ b/layout/_partials/footer.swig</span><br><span class="line">@@ -64,6 +64,17 @@</span><br><span class="line">   &lt;/div&gt;</span><br><span class="line"> &#123;%- endif %&#125;</span><br><span class="line"> </span><br><span class="line">+&#123;%- <span class="keyword">if</span> theme.footer.powered.enable and theme.footer.theme.enable and theme.footer.cdn.enable %&#125;</span><br><span class="line">+  &lt;span class=<span class="string">"post-meta-divider"</span>&gt;|&lt;/span&gt;</span><br><span class="line">+&#123;%- endif %&#125;</span><br><span class="line">+</span><br><span class="line">+&#123;%- <span class="keyword">if</span> theme.footer.cdn.enable %&#125;</span><br><span class="line">+  &lt;div class=<span class="string">"cdn-by"</span>&gt;</span><br><span class="line">+  &lt;span style=<span class="string">"display: inline-block;vertical-align: middle;"</span>&gt;&#123;&#123;- __(<span class="string">'footer.cdn'</span>) &#125;&#125;&lt;/span&gt;</span><br><span class="line">+  &lt;a class=<span class="string">"theme-link"</span> href=<span class="string">"&#123;&#123; url_for(theme.footer.cdn.link) &#125;&#125;"</span> title=<span class="string">"又拍云提供 CDN 服务"</span> rel=<span class="string">"external nofollow noopener noreferrer"</span> target=<span class="string">"_blank"</span> style=<span class="string">"display: inline-block;border: none;vertical-align: middle;"</span>&gt;&lt;img src=<span class="string">"&#123;&#123; url_for(theme.footer.cdn.logo) &#125;&#125;"</span> style=<span class="string">"width:50px"</span>&gt;&lt;/a&gt;</span><br><span class="line">+  &lt;/div&gt;</span><br><span class="line">+&#123;%- endif %&#125;</span><br><span class="line">+</span><br><span class="line"> &#123;%- <span class="keyword">if</span> theme.add_this_id %&#125;</span><br><span class="line">   &lt;div class=<span class="string">"addthis_inline_share_toolbox"</span>&gt;</span><br><span class="line">     &lt;script src=<span class="string">"//s7.addthis.com/js/300/addthis_widget.js#pubid=&#123;&#123; theme.add_this_id &#125;&#125;"</span> async=<span class="string">"async"</span>&gt;&lt;/script&gt;</span><br><span class="line">diff --git a/<span class="built_in">source</span>/css/_schemes/Mist/_layout.styl b/<span class="built_in">source</span>/css/_schemes/Mist/_layout.styl</span><br><span class="line">index da82016..99560fe 100755</span><br><span class="line">--- a/<span class="built_in">source</span>/css/_schemes/Mist/_layout.styl</span><br><span class="line">+++ b/<span class="built_in">source</span>/css/_schemes/Mist/_layout.styl</span><br><span class="line">@@ -64,6 +64,10 @@ hr &#123;</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line">+.cdn-by &#123;</span><br><span class="line">+  display: inline-block;</span><br><span class="line">+&#125;</span><br><span class="line">+</span><br><span class="line"> // About</span><br><span class="line"> // --------------------------------------------------</span><br><span class="line"> <span class="comment">#about-top &#123;</span></span><br></pre></td></tr></table></figure>

<p><code>/source/_data/next.yml</code> 自定义数据文件增加：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">footer:</span></span><br><span class="line"><span class="attr">  cdn:</span></span><br><span class="line"><span class="attr">    enable:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    link:</span> <span class="attr">https://www.upyun.com/?utm_source=lianmeng&amp;utm_medium=referral</span></span><br><span class="line"><span class="attr">    logo:</span> <span class="attr">https://upyun.hoke58.cn/upyun/%E5%8F%88%E6%8B%8D%E4%BA%91_logo5.png</span></span><br></pre></td></tr></table></figure>

<h2 id="图床工具"><a href="#图床工具" class="headerlink" title="图床工具"></a>图床工具</h2><blockquote>
<p><code>PicGo</code> 支持微博图床，七牛云，腾讯云 COS，又拍云，GitHub，SM.MS 图床，阿里云 OSS，Ingur。支持 macOS、windows 64 位系统，完全免费。</p>
</blockquote>
<p>我是用<code>VScode</code>作为 markdown 编辑，主要介绍 <code>VScode</code> 插件 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL1BpY0dvL3ZzLXBpY2dv" title="https://github.com/PicGo/vs-picgo">vs-picgo<i class="fa fa-external-link"></i></span>，在 VSCode 里使用 picgo，实现快速上传图片到远端图床并直接将 URL 写进 Markdown 文件里，极大提升 Markdown 贴图效率与体验。支持 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL01vbHVuZXJmaW5uL1BpY0dv" title="https://github.com/Molunerfinn/PicGo">PicGo<i class="fa fa-external-link"></i></span> 原生自带的 8 种图床。</p>
<ul>
<li><p>截图上传<br><img src="https://upyun.hoke58.cn/img/deploy-hexo-next-vs-picgo-clipboard.gif" alt="deploy-hexo-next-vs-picgo-clipboard.gif"></p>
</li>
<li><p>文件管理器选择上传<br><img src="https://upyun.hoke58.cn/img/deploy-hexo-next-vs-picgo-explorer.gif" alt="deploy-hexo-next-vs-picgo-explorer.gif"></p>
</li>
<li><p>输入文件路径上传<br><img src="https://upyun.hoke58.cn/img/deploy-hexo-next-vs-picgo-inputbox.gif" alt="deploy-hexo-next-vs-picgo-inputbox.gif"></p>
</li>
</ul>
<h3 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h3><p>在插件商店中查找<strong>PicGo</strong>，并安装<br><img src="https://upyun.hoke58.cn/img/deploy-hexo-next-20191121175316.png" alt="deploy-hexo-next-20191121175316.png"></p>
<h3 id="配置-1"><a href="#配置-1" class="headerlink" title="配置"></a>配置</h3><details>
<summary><b>2.0.0开始, VSCode 设置中可以自定义配置 Picgo</b></summary>
<img src="https://i.loli.net/2019/04/09/5cac1821b6621.png" alt="vscode-setting.png">
</details>

<details>
<summary>首先选择当前图床，我们选择 upyun</summary>
<img src="https://i.loli.net/2019/04/09/5cac1847b5907.png" alt="current-picbed.png">
</details>

<details>
<summary>然后输入 upyun 的参数</summary>
<img src="https://upyun.hoke58.cn/img/deploy-hexo-next-20191121181100.png" alt="picgo-upyun.png">
</details>

<details>
<summary>自定义上传图片的名字</summary>
<b>Notice: 如果选中文本上传，选中的部分即为上传图片的文件名</b>
<img src="https://i.loli.net/2019/04/09/5cac189446749.png" alt="image-name.png">
</details>

<details>
<summary>上传图片后md输出格式</summary>
<img src="https://i.loli.net/2019/04/09/5cac18a5c9def.png" alt="output-format.png">
</details>

<p><strong>如果你指定的<code>picgo</code>的<code>path</code>为空，那么将使用 VSCode 默认的<code>setting.json</code>作为配置文件。</strong></p>
<p>配置文件内容(usersetting.json 文件中 picgo.path 路径指定的文件)里需要配置的项主要是<code>picBed</code>：<br>详细信息可参看 <span class="exturl" data-url="aHR0cHM6Ly9waWNnby5naXRodWIuaW8vUGljR28tQ29yZS1Eb2MvemgvZ3VpZGUvY29uZmlnLmh0bWwjJUU5JUJCJTk4JUU4JUFFJUE0JUU5JTg1JThEJUU3JUJEJUFFJUU2JTk2JTg3JUU0JUJCJUI2" title="https://picgo.github.io/PicGo-Core-Doc/zh/guide/config.html#%E9%BB%98%E8%AE%A4%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6">PicGo-配置<i class="fa fa-external-link"></i></span></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">"picgo.picBed.upyun.bucket"</span>: <span class="string">""</span>,     <span class="comment">// 存储空间名，及你的服务名</span></span><br><span class="line">    <span class="string">"picgo.picBed.upyun.operator"</span>: <span class="string">""</span>,   <span class="comment">// 操作员</span></span><br><span class="line">    <span class="string">"picgo.picBed.upyun.password"</span>: <span class="string">""</span>,   <span class="comment">// 密码</span></span><br><span class="line">    <span class="string">"picgo.picBed.upyun.path"</span>: <span class="string">""</span>,       <span class="comment">// 自定义存储路径，比如img/</span></span><br><span class="line">    <span class="string">"picgo.picBed.upyun.url"</span>: <span class="string">""</span>,        <span class="comment">// 加速域名，注意要加http://或者https://</span></span><br><span class="line">    <span class="string">"picgo.customUploadName"</span>: <span class="string">"$&#123;mdFileName&#125;-$&#123;fileName&#125;$&#123;extName&#125;"</span>,   <span class="comment">// 自定上床图片的名字</span></span><br><span class="line">    <span class="string">"picgo.picBed.current"</span>: <span class="string">"upyun"</span>      <span class="comment">// 代表当前的默认上传图床为upyun</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="键盘快捷键"><a href="#键盘快捷键" class="headerlink" title="键盘快捷键"></a>键盘快捷键</h3><table>
<thead>
<tr>
<th>OS</th>
<th>剪贴板图片上传</th>
<th>打开文件管理器上传</th>
<th>打开输入框输入路径上传</th>
</tr>
</thead>
<tbody><tr>
<td>Windows/Unix</td>
<td><kbd>Ctrl</kbd> + <kbd>Alt</kbd> + <kbd>U</kbd></td>
<td><kbd>Ctrl</kbd> + <kbd>Alt</kbd> + <kbd>E</kbd></td>
<td><kbd>Ctrl</kbd> + <kbd>Alt</kbd> + <kbd>O</kbd></td>
</tr>
<tr>
<td>OsX</td>
<td><kbd>Cmd</kbd> + <kbd>Opt</kbd> + <kbd>U</kbd></td>
<td><kbd>Cmd</kbd> + <kbd>Opt</kbd> + <kbd>E</kbd></td>
<td><kbd>Cmd</kbd> + <kbd>Opt</kbd> + <kbd>O</kbd></td>
</tr>
</tbody></table>
<p>以上快捷键均可重新自定义。</p>
<div class="note success">
            <p>使用其它编辑器的同学， 可以下载<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL01vbHVuZXJmaW5uL1BpY0dvL3JlbGVhc2Vz" title="https://github.com/Molunerfinn/PicGo/releases">PicGo<i class="fa fa-external-link"></i></span>，配合使用，开始优雅地书写 Markdown 吧</p>
          </div>

<h1 id="CDN-加速"><a href="#CDN-加速" class="headerlink" title="CDN 加速"></a>CDN 加速</h1><p>远在海外的 Github，国内访问经常抽风，开始为博客加速吧</p>
<p>有了图床使用的经验，使用 CDN 相对容易上手，先上<span class="exturl" data-url="aHR0cHM6Ly9oZWxwLnVweXVuLmNvbS9rbm93bGVkZ2UtYmFzZS9jZG4tY3JlYXRlLXNlcnZpY2Uv" title="https://help.upyun.com/knowledge-base/cdn-create-service/">官档 针对自主源，如何创建 CDN 服务？<i class="fa fa-external-link"></i></span>了解一下大概。</p>
<p>都是页面操作直接上图吧<br><img src="https://upyun.hoke58.cn/img/deploy-hexo-next-20191121191234.png" alt="deploy-hexo-next-20191121191234.png"><br><img src="https://upyun.hoke58.cn/img/deploy-hexo-next-20191121191338.png" alt="deploy-hexo-next-20191121191338.png"><br><img src="https://upyun.hoke58.cn/img/deploy-hexo-next-20191121191416.png" alt="deploy-hexo-next-20191121191416.png"><br><img src="https://upyun.hoke58.cn/img/deploy-hexo-next-20191121191439.png" alt="deploy-hexo-next-20191121191439.png"><br><img src="https://upyun.hoke58.cn/img/deploy-hexo-next-20191121191734.png" alt="deploy-hexo-next-20191121191734.png"></p>
<p>最后把 HTTPS 开启即可，上一张网站测速看一下效果吧<br><img src="https://upyun.hoke58.cn/img/deploy-hexo-next-20191121193645.png" alt="deploy-hexo-next-20191121193645.png"></p>
<h1 id="启用评论系统"><a href="#启用评论系统" class="headerlink" title="启用评论系统"></a>启用评论系统</h1><p>NexT 内置了多款评论系统，博主安装了 Valine 和畅言两款评论系统进行比较供大家参考</p>
<h2 id="valine"><a href="#valine" class="headerlink" title="valine"></a>valine</h2><p>Valine 诞生于2017年8月7日，是一款基于 <code>LeanCloud</code> 的快速、简洁且高效的无后端评论系统。</p>
<p>理论上支持但不限于静态博客，目前已有<code>Hexo</code>、<code>Jekyll</code>、<code>Typecho</code>、<code>Hugo</code>、<code>Ghost</code> 等博客程序在使用 <strong>Valine</strong>。</p>
<p>先看一下效果图<br><img src="https://upyun.hoke58.cn/img/deploy-hexo-next-Valine-2019-12-9" alt="deploy-hexo-next-Valine-2019-12-9"></p>
<p>启用 Valine 只需要三步</p>
<ol>
<li>注册 <span class="exturl" data-url="aHR0cHM6Ly9sZWFuY2xvdWQuY24v" title="https://leancloud.cn/">LeanCloud<i class="fa fa-external-link"></i></span> 账号, 然后再控制台左下角点击<code>创建应用</code> (应用名随意)</li>
<li>选择刚刚创建的<code>应用</code>&gt;<code>设置</code>&gt;选择<code>应用 Key</code>，然后你就能看到你的<code>APP ID</code>和<code>APP KEY</code>了<br><img src="https://upyun.hoke58.cn/img/deploy-hexo-next-Valine-setting-2019-12-9" alt="deploy-hexo-next-Valine-setting-2019-12-9"></li>
<li>拿到<code>APP ID</code>和<code>APP KEY</code>之后，设置Hexo配置文件<code>_config.yml</code><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">valine:</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">true</span> <span class="comment"># When enable is set to be true, leancloud_visitors is recommended to be closed for the re-initialization problem within different leancloud adk version</span></span><br><span class="line"><span class="attr">  appid:</span>  <span class="comment"># Your leancloud application appid</span></span><br><span class="line"><span class="attr">  appkey:</span>  <span class="comment"># Your leancloud application appkey</span></span><br><span class="line"><span class="attr">  notify:</span> <span class="literal">true</span> <span class="comment"># Mail notifier. See: https://github.com/xCss/Valine/wiki</span></span><br><span class="line"><span class="attr">  verify:</span> <span class="literal">false</span> <span class="comment"># Verification code</span></span><br><span class="line"><span class="attr">  placeholder:</span> <span class="string">亲，欢迎评论</span> <span class="comment"># Comment box placeholder</span></span><br><span class="line"><span class="attr">  avatar:</span> <span class="string">mm</span> <span class="comment"># Gravatar style</span></span><br><span class="line"><span class="attr">  guest_info:</span> <span class="string">nick,mail</span> <span class="comment"># Custom comment header</span></span><br><span class="line"><span class="attr">  pageSize:</span> <span class="number">10</span> <span class="comment"># Pagination size</span></span><br><span class="line"><span class="attr">  language:</span> <span class="string">zh-cn</span> <span class="comment"># Language, available values: en, zh-cn</span></span><br><span class="line"><span class="attr">  visitor:</span> <span class="literal">false</span> <span class="comment"># leancloud-counter-security is not supported for now. When visitor is set to be true, appid and appkey are recommended to be the same as leancloud_visitors' for counter compatibility. Article reading statistic https://valine.js.org/visitor.html</span></span><br><span class="line"><span class="attr">  comment_count:</span> <span class="literal">true</span> <span class="comment"># If false, comment count will only be displayed in post page, not in home page</span></span><br><span class="line"><span class="attr">  recordIP:</span> <span class="literal">true</span> <span class="comment"># Whether to record the commenter IP</span></span><br><span class="line"><span class="attr">  serverURLs:</span> <span class="attr">https://leancloud.hoke58.cn</span> <span class="comment"># When the custom domain name is enabled, fill it in here (it will be detected automatically by default, no need to fill in)</span></span><br><span class="line">  <span class="comment">#post_meta_order: 0</span></span><br></pre></td></tr></table></figure>

</li>
</ol>
<p>最后！记得在Leancloud -&gt; 设置 -&gt; 安全中心 -&gt; Web 安全域名 把你的域名加进去</p>
<p><code>hexo clean &amp;&amp; hexo g -d &amp;&amp; hexo s</code> 是不是就能看到评论框了</p>
<h2 id="畅言"><a href="#畅言" class="headerlink" title="畅言"></a>畅言</h2><p>搜狐加持，样式美观大方，自带第三方登录系统，后台功能强大，但是需要域名备案，先上张效果图<br><img src="https://upyun.hoke58.cn/img/20191212162034-2019-12-12" alt="20191212162034-2019-12-12"></p>
<p>很遗憾的是在 Thu Dec 12 16:23:50 CST 2019 调试的时候无法登录，试了下官方也无法登录评论，已反馈至官方</p>
<p>以下是启用畅言的步骤</p>
<ol>
<li>进入 <span class="exturl" data-url="aHR0cDovL2NoYW5neWFuLmt1YWl6aGFuLmNvbQ==" title="http://changyan.kuaizhan.com">畅言<i class="fa fa-external-link"></i></span> 官网，注册账号</li>
<li>登录后添加站点信息，等待审核</li>
<li>点击 <code>后台总览</code> 获取 <code>APP ID</code>、<code>APP KEY</code>, 设置 Hexo 配置文件<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">changyan:</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">  appid:</span> <span class="string">cyuzQEhXS</span></span><br><span class="line"><span class="attr">  appkey:</span> </span><br><span class="line">  <span class="comment">#post_meta_order: 0</span></span><br></pre></td></tr></table></figure>
最后执行 <code>hexo clean &amp;&amp; hexo g -d &amp;&amp; hexo s</code> 查看效果</li>
</ol>
<h1 id="站内搜索"><a href="#站内搜索" class="headerlink" title="站内搜索"></a>站内搜索</h1><p>NexT 主题集成三种站内搜索： Algolia Search, Swiftype Search, Local Search。前两者都需要注册第三方服务，后者是本地搜索。简单易用原则本站采用本地搜索，也是官方推荐的方案<br>安装步骤</p>
<ol>
<li>在 hexo 站点根目录安装 <code>hexo-generator-searchdb</code><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npm install hexo-generator-searchdb --save</span><br></pre></td></tr></table></figure></li>
<li>编辑 hexo 配置文件增加以下内容<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">search:</span></span><br><span class="line"><span class="attr">  path:</span> <span class="string">search.xml</span></span><br><span class="line"><span class="attr">  field:</span> <span class="string">post</span></span><br><span class="line"><span class="attr">  format:</span> <span class="string">html</span></span><br><span class="line"><span class="attr">  limit:</span> <span class="number">10000</span></span><br></pre></td></tr></table></figure></li>
<li>编辑 NexT 配置文件启用 Local Search<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Dependencies: https://github.com/theme-next/hexo-generator-searchdb</span></span><br><span class="line"><span class="attr">local_search:</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># If auto, trigger search by changing input.</span></span><br><span class="line">  <span class="comment"># If manual, trigger search by pressing enter key or search button.</span></span><br><span class="line"><span class="attr">  trigger:</span> <span class="string">auto</span></span><br><span class="line">  <span class="comment"># Show top n results per article, show all results by setting to -1</span></span><br><span class="line"><span class="attr">  top_n_per_article:</span> <span class="bullet">-1</span></span><br><span class="line">  <span class="comment"># Unescape html strings to the readable one.</span></span><br><span class="line"><span class="attr">  unescape:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># Preload the search data when the page loads.</span></span><br><span class="line"><span class="attr">  preload:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>Web</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>NexT</tag>
        <tag>Github</tag>
        <tag>Coding</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux下的/proc/[pid]目录下的文件分析</title>
    <url>/systemops/Linux-proc-pid.html</url>
    <content><![CDATA[<h1 id="auxv"><a href="#auxv" class="headerlink" title="auxv"></a>auxv</h1><p><code>/proc/[pid]/auxv</code>包含传递给进程的<code>ELF</code>解释器信息，格式是每一项都是一个<code>unsigned long</code>长度的<code>ID</code>加上一个<code>unsigned long</code>长度的值。最后一项以连续的两个<code>0x00</code>开头。举例如下：  </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># hexdump -x /proc/2948/auxv</span></span><br><span class="line">0000000    0021    0000    0000    0000    0000    1a82    7ffd    0000</span><br><span class="line">0000010    0010    0000    0000    0000    dbf5    1fc9    0000    0000</span><br><span class="line">0000020    0006    0000    0000    0000    1000    0000    0000    0000</span><br><span class="line">0000030    0011    0000    0000    0000    0064    0000    0000    0000</span><br><span class="line">0000040    0003    0000    0000    0000    2040    4326    7f4a    0000</span><br><span class="line">0000050    0004    0000    0000    0000    0038    0000    0000    0000</span><br><span class="line">0000060    0005    0000    0000    0000    0009    0000    0000    0000</span><br><span class="line">0000070    0007    0000    0000    0000    f000    4303    7f4a    0000</span><br><span class="line">0000080    0008    0000    0000    0000    0000    0000    0000    0000</span><br><span class="line">0000090    0009    0000    0000    0000    8e67    4327    7f4a    0000</span><br><span class="line">00000a0    000b    0000    0000    0000    0000    0000    0000    0000</span><br><span class="line">00000b0    000c    0000    0000    0000    0000    0000    0000    0000</span><br><span class="line">00000c0    000d    0000    0000    0000    0000    0000    0000    0000</span><br><span class="line">00000d0    000e    0000    0000    0000    0000    0000    0000    0000</span><br><span class="line">00000e0    0017    0000    0000    0000    0000    0000    0000    0000</span><br><span class="line">00000f0    0019    0000    0000    0000    3de9    1a80    7ffd    0000</span><br><span class="line">0000100    001f    0000    0000    0000    4fe5    1a80    7ffd    0000</span><br><span class="line">0000110    000f    0000    0000    0000    3df9    1a80    7ffd    0000</span><br><span class="line">0000120    0000    0000    0000    0000    0000    0000    0000    0000</span><br><span class="line">0000130</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h1 id="cmdline"><a href="#cmdline" class="headerlink" title="cmdline"></a>cmdline</h1><p><code>/proc/[pid]/cmdline</code>是一个只读文件，包含进程的完整命令行信息。如果这个进程是<code>zombie</code>进程，则这个文件没有任何内容。举例如下：    </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ps -ef | grep 2948</span></span><br><span class="line">root       2948      1  0 Nov05 ?        00:00:04 /usr/sbin/libvirtd --listen</span><br><span class="line"></span><br><span class="line"><span class="comment"># cat /proc/2948/cmdline</span></span><br><span class="line">/usr/sbin/libvirtd--listen</span><br></pre></td></tr></table></figure>
<h1 id="comm"><a href="#comm" class="headerlink" title="comm"></a>comm</h1><p><code>/proc/[pid]/comm</code>包含进程的命令名。举例如下：  </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cat /proc/2948/comm</span></span><br><span class="line">libvirtd</span><br></pre></td></tr></table></figure>
<h1 id="cwd"><a href="#cwd" class="headerlink" title="cwd"></a>cwd</h1><p><code>/proc/[pid]/cwd</code>是进程当前工作目录的符号链接。举例如下：  </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ls -lt /proc/2948/cwd</span></span><br><span class="line">lrwxrwxrwx 1 root root 0 Nov  9 12:14 /proc/2948/cwd -&gt; /</span><br></pre></td></tr></table></figure>

<h1 id="environ"><a href="#environ" class="headerlink" title="environ"></a>environ</h1><p><code>/proc/[pid]/environ</code>显示进程的环境变量。举例如下：  </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># strings /proc/2948/environ</span></span><br><span class="line">LANG=POSIX</span><br><span class="line">LC_CTYPE=en_US.UTF-8</span><br><span class="line">PATH=/usr/<span class="built_in">local</span>/sbin:/usr/<span class="built_in">local</span>/bin:/usr/sbin:/usr/bin:/sbin:/bin</span><br><span class="line">NOTIFY_SOCKET=@/org/freedesktop/systemd1/notify</span><br><span class="line">LIBVIRTD_CONFIG=/etc/libvirt/libvirtd.conf</span><br><span class="line">LIBVIRTD_ARGS=--listen</span><br><span class="line">LIBVIRTD_NOFILES_LIMIT=2048</span><br></pre></td></tr></table></figure>
<h1 id="exe"><a href="#exe" class="headerlink" title="exe"></a>exe</h1><p><code>/proc/[pid]/exe</code>为实际运行程序的符号链接。举例如下：  </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ls -lt /proc/2948/exe</span></span><br><span class="line">lrwxrwxrwx 1 root root 0 Nov  5 13:04 /proc/2948/exe -&gt; /usr/sbin/libvirtd</span><br></pre></td></tr></table></figure>
<h1 id="fd"><a href="#fd" class="headerlink" title="fd"></a>fd</h1><p><code>/proc/[pid]/fd</code>是一个目录，包含进程打开文件的情况。举例如下：  </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ls -lt /proc/3801/fd</span></span><br><span class="line">total 0</span><br><span class="line">lrwx------. 1 root root 64 Apr 18 16:51 0 -&gt; socket:[37445]</span><br><span class="line">lrwx------. 1 root root 64 Apr 18 16:51 1 -&gt; socket:[37446]</span><br><span class="line">lrwx------. 1 root root 64 Apr 18 16:51 10 -&gt; socket:[31729]</span><br><span class="line">lrwx------. 1 root root 64 Apr 18 16:51 11 -&gt; socket:[34562]</span><br><span class="line">lrwx------. 1 root root 64 Apr 18 16:51 12 -&gt; socket:[39978]</span><br><span class="line">lrwx------. 1 root root 64 Apr 18 16:51 13 -&gt; socket:[34574]</span><br><span class="line">lrwx------. 1 root root 64 Apr 18 16:51 14 -&gt; socket:[39137]</span><br><span class="line">lrwx------. 1 root root 64 Apr 18 16:51 15 -&gt; socket:[39208]</span><br><span class="line">lrwx------. 1 root root 64 Apr 18 16:51 16 -&gt; socket:[39221]</span><br><span class="line">lrwx------. 1 root root 64 Apr 18 16:51 17 -&gt; socket:[41080]</span><br><span class="line">lrwx------. 1 root root 64 Apr 18 16:51 18 -&gt; socket:[40014]</span><br><span class="line">lrwx------. 1 root root 64 Apr 18 16:51 19 -&gt; socket:[34617]</span><br><span class="line">lrwx------. 1 root root 64 Apr 18 16:51 20 -&gt; socket:[34620]</span><br><span class="line">lrwx------. 1 root root 64 Apr 18 16:51 23 -&gt; socket:[42357]</span><br><span class="line">lr-x------. 1 root root 64 Apr 18 16:51 3 -&gt; /dev/urandom</span><br><span class="line">lrwx------. 1 root root 64 Apr 18 16:51 4 -&gt; socket:[37468]</span><br><span class="line">lrwx------. 1 root root 64 Apr 18 16:51 5 -&gt; socket:[37471]</span><br><span class="line">lrwx------. 1 root root 64 Apr 18 16:51 6 -&gt; socket:[289532]</span><br><span class="line">lrwx------. 1 root root 64 Apr 18 16:51 7 -&gt; socket:[31728]</span><br><span class="line">lrwx------. 1 root root 64 Apr 18 16:51 8 -&gt; socket:[37450]</span><br><span class="line">lrwx------. 1 root root 64 Apr 18 16:51 9 -&gt; socket:[37451]</span><br><span class="line">l-wx------. 1 root root 64 Apr 13 16:35 2 -&gt; /root/.vnc/localhost.localdomain:1.log</span><br><span class="line">```    </span><br><span class="line">目录中的每一项都是一个符号链接，指向打开的文件，数字则代表文件描述符。  </span><br><span class="line"></span><br><span class="line"><span class="comment"># latency  </span></span><br><span class="line">`/proc/[pid]/latency`显示哪些代码造成的延时比较大（使用这个`feature`，需要执行“`<span class="built_in">echo</span> 1 &gt; /proc/sys/kernel/latencytop`”）。举例如下：  </span><br><span class="line">```bash</span><br><span class="line"><span class="comment"># cat /proc/2948/latency</span></span><br><span class="line">Latency Top version : v0.1</span><br><span class="line">30667 10650491 4891 poll_schedule_timeout do_sys_poll SyS_poll system_call_fastpath 0x7f636573dc1d</span><br><span class="line">8 105 44 futex_wait_queue_me futex_wait do_futex SyS_futex system_call_fastpath 0x7f6365a167bc</span><br></pre></td></tr></table></figure>
<p>每一行前三个数字分别是后面代码执行的次数，总共执行延迟时间（单位是微秒）和最长执行延迟时间（单位是微秒），后面则是代码完整的调用栈。</p>
<h1 id="limits"><a href="#limits" class="headerlink" title="limits"></a>limits</h1><p><code>/proc/[pid]/limits</code>显示当前进程的资源限制。举例如下：  </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cat /proc/2948/limits</span></span><br><span class="line">Limit                     Soft Limit           Hard Limit           Units</span><br><span class="line">Max cpu time              unlimited            unlimited            seconds</span><br><span class="line">Max file size             unlimited            unlimited            bytes</span><br><span class="line">Max data size             unlimited            unlimited            bytes</span><br><span class="line">Max stack size            8388608              unlimited            bytes</span><br><span class="line">Max core file size        0                    unlimited            bytes</span><br><span class="line">Max resident <span class="built_in">set</span>          unlimited            unlimited            bytes</span><br><span class="line">Max processes             6409                 6409                 processes</span><br><span class="line">Max open files            1024                 4096                 files</span><br><span class="line">Max locked memory         65536                65536                bytes</span><br><span class="line">Max address space         unlimited            unlimited            bytes</span><br><span class="line">Max file locks            unlimited            unlimited            locks</span><br><span class="line">Max pending signals       6409                 6409                 signals</span><br><span class="line">Max msgqueue size         819200               819200               bytes</span><br><span class="line">Max nice priority         0                    0</span><br><span class="line">Max realtime priority     0                    0</span><br><span class="line">Max realtime timeout      unlimited            unlimited            us</span><br></pre></td></tr></table></figure>
<p><code>Soft Limit</code>表示<code>kernel</code>设置给资源的值，<code>Hard Limit</code>表示<code>Soft Limit</code>的上限，而<code>Units</code>则为计量单元。</p>
<h1 id="maps"><a href="#maps" class="headerlink" title="maps"></a>maps</h1><p><code>/proc/[pid]/maps</code>显示进程的内存区域映射信息。举例如下：  </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cat /proc/2948/maps</span></span><br><span class="line">......</span><br><span class="line">address                   perms offset  dev   inode                      pathname</span><br><span class="line">7f4a2e2ad000-7f4a2e2ae000 rw-p 00006000 08:14 6505977                    /usr/lib64/sasl2/libsasldb.so.3.0.0</span><br><span class="line">7f4a2e2ae000-7f4a2e2af000 ---p 00000000 00:00 0</span><br><span class="line">7f4a2e2af000-7f4a2eaaf000 rw-p 00000000 00:00 0                          [stack:94671]</span><br><span class="line">7f4a2eaaf000-7f4a2eab0000 ---p 00000000 00:00 0</span><br><span class="line">7f4a2eab0000-7f4a2f2b0000 rw-p 00000000 00:00 0                          [stack:94670]</span><br><span class="line">......</span><br><span class="line">7f4a434d0000-7f4a434d5000 rw-p 0006e000 08:14 4292988                    /usr/sbin/libvirtd</span><br><span class="line">7f4a4520a000-7f4a452f7000 rw-p 00000000 00:00 0                          [heap]</span><br><span class="line">7ffd1a7e4000-7ffd1a805000 rw-p 00000000 00:00 0                          [stack]</span><br><span class="line">7ffd1a820000-7ffd1a821000 r-xp 00000000 00:00 0                          [vdso]</span><br><span class="line">ffffffffff600000-ffffffffff601000 r-xp 00000000 00:00 0                  [vsyscall]</span><br></pre></td></tr></table></figure>
<p>其中注意的一点是<code>[stack:&lt;tid&gt;]</code>是线程的堆栈信息，对应于<code>/proc/[pid]/task/[tid]/</code>路径。  </p>
<h1 id="root"><a href="#root" class="headerlink" title="root"></a>root</h1><p><code>/proc/[pid]/root</code>是进程根目录的符号链接。举例如下： </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ls -lt /proc/2948/root</span></span><br><span class="line">lrwxrwxrwx 1 root root 0 Nov  9 12:14 /proc/2948/root -&gt; /</span><br></pre></td></tr></table></figure>
<h1 id="stack"><a href="#stack" class="headerlink" title="stack"></a>stack</h1><p><code>/proc/[pid]/stack</code>显示当前进程的内核调用栈信息，只有内核编译时打开了<code>CONFIG_STACKTRACE</code>编译选项，才会生成这个文件。举例如下：  </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cat /proc/2948/stack</span></span><br><span class="line">[&lt;ffffffff80168375&gt;] poll_schedule_timeout+0x45/0x60</span><br><span class="line">[&lt;ffffffff8016994d&gt;] do_sys_poll+0x49d/0x550</span><br><span class="line">[&lt;ffffffff80169abd&gt;] SyS_poll+0x5d/0xf0</span><br><span class="line">[&lt;ffffffff804c16e7&gt;] system_call_fastpath+0x16/0x1b</span><br><span class="line">[&lt;00007f4a41ff2c1d&gt;] 0x7f4a41ff2c1d</span><br><span class="line">[&lt;ffffffffffffffff&gt;] 0xffffffffffffffff</span><br></pre></td></tr></table></figure>
<h1 id="statm"><a href="#statm" class="headerlink" title="statm"></a>statm</h1><p><code>/proc/[pid]/statm</code>显示进程所占用内存大小的统计信息，包含七个值，度量单位是<code>page</code>（<code>page</code>大小可通过<code>getconf PAGESIZE</code>得到）。举例如下：  </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cat /proc/2948/statm  </span></span><br><span class="line">72362 12945 4876 569 0 24665 0</span><br></pre></td></tr></table></figure>
<p>各个值含义：<br>    a）进程占用的总的内存；<br>    b）进程当前时刻占用的物理内存；<br>    c）同其它进程共享的内存；<br>    d）进程的代码段；<br>    e）共享库（从<code>2.6</code>版本起，这个值为<code>0</code>）；<br>    f）进程的堆栈；<br>    g）<code>dirty pages</code>（从<code>2.6</code>版本起，这个值为<code>0</code>）。  </p>
<h1 id="status"><a href="#status" class="headerlink" title="status"></a>status</h1><p><code>/proc/[pid]/status</code>包含进程的状态信息。其很多内容与<code>/proc/[pid]/stat</code>和<code>/proc/[pid]/statm</code>，但是却是以一种更清晰地方式展现出来。举例如下：  </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cat /proc/$$/status</span></span><br><span class="line">Name:   bash</span><br><span class="line">Umask:  0022</span><br><span class="line">State:  S (sleeping)</span><br><span class="line">Tgid:   15694</span><br><span class="line">Ngid:   0</span><br><span class="line">Pid:    15694</span><br><span class="line">PPid:   15692</span><br><span class="line">TracerPid:      0</span><br><span class="line">Uid:    0       0       0       0</span><br><span class="line">Gid:    0       0       0       0</span><br><span class="line">FDSize: 256</span><br><span class="line">Groups: 0 1 2 3 4 6 10 19</span><br><span class="line">NStgid: 15694</span><br><span class="line">NSpid:  15694</span><br><span class="line">NSpgid: 15694</span><br><span class="line">NSsid:  15694</span><br><span class="line">VmPeak:    26040 kB</span><br><span class="line">VmSize:    26040 kB</span><br><span class="line">VmLck:         0 kB</span><br><span class="line">VmPin:         0 kB</span><br><span class="line">VmHWM:      5412 kB</span><br><span class="line">VmRSS:      5412 kB</span><br><span class="line">RssAnon:            2272 kB</span><br><span class="line">RssFile:            3140 kB</span><br><span class="line">RssShmem:              0 kB</span><br><span class="line">VmData:     2244 kB</span><br><span class="line">VmStk:       132 kB</span><br><span class="line">VmExe:       792 kB</span><br><span class="line">VmLib:      2732 kB</span><br><span class="line">VmPTE:        68 kB</span><br><span class="line">VmPMD:        12 kB</span><br><span class="line">VmSwap:        0 kB</span><br><span class="line">HugetlbPages:          0 kB</span><br><span class="line">Threads:        1</span><br><span class="line">SigQ:   0/11753</span><br><span class="line">SigPnd: 0000000000000000</span><br><span class="line">ShdPnd: 0000000000000000</span><br><span class="line">SigBlk: 0000000000010000</span><br><span class="line">SigIgn: 0000000000380004</span><br><span class="line">SigCgt: 000000004b817efb</span><br><span class="line">CapInh: 0000000000000000</span><br><span class="line">CapPrm: 0000003fffffffff</span><br><span class="line">CapEff: 0000003fffffffff</span><br><span class="line">CapBnd: 0000003fffffffff</span><br><span class="line">CapAmb: 0000000000000000</span><br><span class="line">NoNewPrivs:     0</span><br><span class="line">Seccomp:        0</span><br><span class="line">Cpus_allowed:   f</span><br><span class="line">Cpus_allowed_list:      0-3</span><br><span class="line">Mems_allowed:   00000000,00000001</span><br><span class="line">Mems_allowed_list:      0</span><br><span class="line">voluntary_ctxt_switches:        1045</span><br><span class="line">nonvoluntary_ctxt_switches:     30</span><br></pre></td></tr></table></figure>
<p>关于信号（<code>signal</code>）的信息：<code>SigQ</code>分为两部分（例如<code>0/11753</code>），前面表示当前处在队列中的信号（<code>0</code>），后面则表示队列一共可以存储多少信号（<code>11753</code>）；<code>SigPnd</code>表示当前线程<code>pending</code>的信号，而<code>ShdPnd</code>则表示整个进程<code>pending</code>的信号；<code>SigBlk</code>、<code>SigIgn</code>和<code>SigCgt</code>分别表示对信号的处理是阻塞，忽略，还是捕获。（关于<code>Unix</code>信号的相关知识，可以参考<span class="exturl" data-url="aHR0cHM6Ly93d3cubmV0d29ya3dvcmxkLmNvbS9hcnRpY2xlLzMyMTEyOTYvbGludXgvdW5peC1kZWFsaW5nLXdpdGgtc2lnbmFscy5odG1s" title="https://www.networkworld.com/article/3211296/linux/unix-dealing-with-signals.html">Unix: Dealing with signals<i class="fa fa-external-link"></i></span>）。</p>
<h1 id="syscall"><a href="#syscall" class="headerlink" title="syscall"></a>syscall</h1><p><code>/proc/[pid]/syscall</code>显示当前进程正在执行的系统调用。举例如下：  </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cat /proc/2948/syscall</span></span><br><span class="line">7 0x7f4a452cbe70 0xb 0x1388 0xffffffffffdff000 0x7f4a4274a750 0x0 0x7ffd1a8033f0 0x7f4a41ff2c1d</span><br><span class="line">```    </span><br><span class="line">第一个值是系统调用号（`7`代表`poll`），后面跟着`6`个系统调用的参数值（位于寄存器中），最后两个值依次是堆栈指针和指令计数器的值。如果当前进程虽然阻塞，但阻塞函数并不是系统调用，则系统调用号的值为`-1`，后面只有堆栈指针和指令计数器的值。如果进程没有阻塞，则这个文件只有一个“`running`”的字符串。</span><br><span class="line"></span><br><span class="line">内核编译时打开了`CONFIG_HAVE_ARCH_TRACEHOOK`编译选项，才会生成这个文件。  </span><br><span class="line"></span><br><span class="line"><span class="comment"># wchan  </span></span><br><span class="line">`/proc/[pid]/wchan`显示当进程`sleep`时，`kernel`当前运行的函数。举例如下：  </span><br><span class="line">```bash</span><br><span class="line"><span class="comment"># cat /proc/2948/wchan</span></span><br><span class="line">kauditd_thread</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>系统运维</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
</search>
